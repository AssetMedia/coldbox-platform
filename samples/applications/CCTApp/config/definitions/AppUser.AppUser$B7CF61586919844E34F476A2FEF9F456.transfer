<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true">
<cfargument name="utility" type="transfer.com.util.Utility" required="true">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true">
<cfscript>
instance = StructNew();
setThisObject(arguments.thisObject);
setTransfer(arguments.transfer);
setUtility(arguments.utility);
setNullable(arguments.nullable);
setClassName("AppUser.AppUser");
setIsDirty(true);
setIsPersisted(false);
setIsClone(false);
setAppUserId(getNullable().getNullUUID(getClassName(), "AppUserId"));
setUsername("");
setPassword("");
setFirstName("");
setLastName("");
setEmail("");
setUpdatedOn(Now());
setCreatedOn(Now());
setisActive(false);
setLoaded(StructNew());
if(StructKeyExists(this, "configure") OR StructKeyExists(variables, "configure"))
{
configure();
}
return this;
</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true">
<cfscript>
if(getIsPersisted())
{
if(getClassName() neq arguments.transfer.getClassName())
{
return false;
}
return (getAppUserId() eq arguments.transfer.getAppUserId());
}
else
{
return sameTransfer(arguments.transfer);
}
</cfscript>
</cffunction>

<cffunction name="getAppUserId" access="public" returntype="uuid" default="uuid" hint="" output="false">
<cfscript>
return instance.AppUserId;
</cfscript>
</cffunction>

<cffunction name="setAppUserId" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="AppUserId" type="uuid" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "AppUserId") OR getAppUserId() neq arguments.AppUserId)
{
instance.AppUserId = arguments.AppUserId;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getUsername" access="public" returntype="string" default="string" hint="" output="false">
<cfscript>
return instance.Username;
</cfscript>
</cffunction>

<cffunction name="setUsername" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="Username" type="string" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "Username") OR Compare(getUsername(), arguments.Username) neq 0)
{
instance.Username = arguments.Username;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getPassword" access="public" returntype="string" default="string" hint="" output="false">
<cfscript>
return instance.Password;
</cfscript>
</cffunction>

<cffunction name="setPassword" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="Password" type="string" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "Password") OR Compare(getPassword(), arguments.Password) neq 0)
{
instance.Password = arguments.Password;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getFirstName" access="public" returntype="string" default="string" hint="" output="false">
<cfscript>
return instance.FirstName;
</cfscript>
</cffunction>

<cffunction name="setFirstName" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="FirstName" type="string" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "FirstName") OR Compare(getFirstName(), arguments.FirstName) neq 0)
{
instance.FirstName = arguments.FirstName;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getLastName" access="public" returntype="string" default="string" hint="" output="false">
<cfscript>
return instance.LastName;
</cfscript>
</cffunction>

<cffunction name="setLastName" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="LastName" type="string" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "LastName") OR Compare(getLastName(), arguments.LastName) neq 0)
{
instance.LastName = arguments.LastName;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getEmail" access="public" returntype="string" default="string" hint="" output="false">
<cfscript>
return instance.Email;
</cfscript>
</cffunction>

<cffunction name="setEmail" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="Email" type="string" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "Email") OR Compare(getEmail(), arguments.Email) neq 0)
{
instance.Email = arguments.Email;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getUpdatedOn" access="public" returntype="date" default="date" hint="" output="false">
<cfscript>
return instance.UpdatedOn;
</cfscript>
</cffunction>

<cffunction name="setUpdatedOn" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="UpdatedOn" type="date" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "UpdatedOn") OR getUpdatedOn() neq arguments.UpdatedOn)
{
instance.UpdatedOn = arguments.UpdatedOn;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getCreatedOn" access="public" returntype="date" default="date" hint="" output="false">
<cfscript>
return instance.CreatedOn;
</cfscript>
</cffunction>

<cffunction name="setCreatedOn" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="CreatedOn" type="date" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "CreatedOn") OR getCreatedOn() neq arguments.CreatedOn)
{
instance.CreatedOn = arguments.CreatedOn;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getisActive" access="public" returntype="boolean" default="boolean" hint="" output="false">
<cfscript>
return instance.isActive;
</cfscript>
</cffunction>

<cffunction name="setisActive" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="isActive" type="boolean" required="true">
<cfscript>
if(NOT StructKeyExists(instance, "isActive") OR getisActive() neq arguments.isActive)
{
instance.isActive = arguments.isActive;
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="memento" type="struct" required="true">
<cfscript>
var composite = 0;
if(NOT getIsPersisted())
{
setAppUserId(arguments.memento.AppUserId);
}
setPropertyMemento(arguments.memento);
</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="memento" type="struct" required="true">
<cfscript>
setUsername(arguments.memento.Username);
setPassword(arguments.memento.Password);
setFirstName(arguments.memento.FirstName);
setLastName(arguments.memento.LastName);
setEmail(arguments.memento.Email);
setUpdatedOn(arguments.memento.UpdatedOn);
setCreatedOn(arguments.memento.CreatedOn);
setisActive(arguments.memento.isActive);
</cfscript>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
var memento = StructNew();
memento.AppUserId = getAppUserId();
memento.transfer_isDirty = getIsDirty();
memento.transfer_isPersisted = getIsPersisted();
StructAppend(memento, getPropertyMemento());
return memento;
</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
var memento = StructNew();
memento.Username = getUsername();
memento.Password = getPassword();
memento.FirstName = getFirstName();
memento.LastName = getLastName();
memento.Email = getEmail();
memento.UpdatedOn = getUpdatedOn();
memento.CreatedOn = getCreatedOn();
memento.isActive = getisActive();
return memento;
</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true">
<cfscript>
if(arguments.transfer.getClassName() neq "AppUser.AppUser")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'AppUser.AppUser'");
}
arguments.transfer.setMemento(getMemento());
</cfscript>
</cffunction>

<cffunction name="validateCacheState" access="package" returntype="boolean" default="boolean" hint="if this object is cached, then validate that all it's composites are cached too" output="false">
<cfscript>
var iterator = 0;
var item = 0;
if(getIsPersisted() AND NOT getTransfer().validateIsCached(getThisObject()))
{
return true;
}
return true;
</cfscript>
</cffunction>

<cffunction name="actionAfterCreateTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
switch(arguments.event.getTransferObject().getClassName())
{
}
</cfscript>
</cffunction>

<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
switch(arguments.event.getTransferObject().getClassName())
{
}
</cfscript>
</cffunction>

<cffunction name="actionBeforeDiscardTransferEvent" access="public" returntype="void" default="void" hint="" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true">
<cfscript>
var discard = false;
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
switch(arguments.event.getTransferObject().getClassName())
{
}
if(discard)
{
getTransfer().discard(getThisObject());
}
</cfscript>
</cffunction>


