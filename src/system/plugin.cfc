<!-----------------------------------------------------------------------Author 	 :	Luis MajanoDate     :	September 23, 2005Description :	This is an abstract cfc that all plugins should extend.Modification History:-----------------------------------------------------------------------><cfcomponent name="plugin" hint="This is the plugin base cfc. All the plugins can have access to the controller methods through composition."><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cfset variables.controller = ""><!------------------------------------------- PUBLIC ------------------------------------------->	<cffunction name="init" access="public" returntype="any" output="false">		<cfargument name="controller" required="yes" hint="The reference to the framework controller">			<cfset variables.controller = arguments.controller>			<cfreturn this>	</cffunction>	<!--- ************************************************************* --->	<!--- SETTERS --->	<!--- ************************************************************* --->		<cffunction name="setDebugMode" access="public" hint="Facade for the controller setDebugMode" returntype="void"  output="false">		<cfargument name="mode" type="boolean" >		<cfset controller.setDebugMode(arguments.mode)>	</cffunction>		<cffunction name="setLayout" 	access="Public"	hint="Facade for the controller setLayout" returntype="void" output="false">		<!--- ************************************************************* --->		<cfargument name="name"  hint="The name of the layout to set." type="string" >		<!--- ************************************************************* --->	  	<cfset controller.setLayout(trim(arguments.name))>	</cffunction>		<cffunction name="setNextEvent" access="Public" hint="Facade for the controller setNextEvent" returntype="void" output="false">		<!--- ************************************************************* --->		<cfargument name="event"  		hint="The name of the event to run."  type="string" required="No" default="#getSetting("DefaultEvent")#">		<cfargument name="queryString"  hint="The query string to append."    type="string" required="No" default="" >		<!--- ************************************************************* --->	    <cfset controller.setNextEvent(arguments.event, arguments.queryString)>	</cffunction>	<cffunction name="setSetting" access="Public" returntype="any" hint="Facade for the controller setSetting" output="false">		<cfargument name="name"  type="string"  hint="The name of the setting" >		<cfargument name="value" type="any"  hint="The value of the setting (Can be simple or complex)">		<!--- ************************************************************* --->		<cfset controller.setSetting(arguments.name, arguments.value)>	</cffunction>		<cffunction name="setValue" access="Public" hint="Facade for controller setValue"  output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="name"  type="string" >		<cfargument name="value" type="Any" >		<!--- ************************************************************* --->		<cfset controller.setValue(arguments.name, arguments.value)>	</cffunction>	<cffunction name="setView" access="Public" hint="Facade for the controller setView" returntype="void" output="false">		<!--- ************************************************************* --->		<cfargument name="name"  		hint="The name of the view to set." type="string">		<cfargument name="nolayout" 	type="boolean" required="false" default="false" hint="Boolean flag, wether the view sent in will be using a layout or not. Default is false. Uses a pre set layout or the default layout.">		<!--- ************************************************************* --->	    <cfset controller.setView(arguments.name, arguments.nolayout)>	</cffunction>	<!--- ************************************************************* --->	<!--- GETTERS --->	<!--- ************************************************************* --->		<cffunction name="getCollection" access="Public" returntype="any" hint="Facade for the controller getCollection" output="false">		<!--- ************************************************************* --->		<cfargument name="DeepCopyFlag" hint="Default is false, gives a reference to the collection. True, creates a deep copy of the collection." type="boolean" required="no" default="false">		<!--- ************************************************************* --->		<cfreturn controller.getCollection(arguments.DeepCopyFlag)>	</cffunction>		<cffunction name="getCurrentLayout" access="public" hint="Gets the current set layout" returntype="string" output="false">		<cfreturn controller.getValue("currentLayout","")>	</cffunction>	<cffunction name="getCurrentEvent" access="public" hint="Gets the current set event" returntype="string" output="false">		<cfreturn controller.getValue("event","")>	</cffunction>		<cffunction name="getCurrentPath" access="public" hint="Facade for the controller currentPath" returntype="string"  output="false">		<cfreturn controller.getCurrentPath()>	</cffunction>		<cffunction name="getCurrentView" access="public" hint="Gets the current set view" returntype="string" output="false">		<cfreturn controller.getValue("currentView","")>	</cffunction>		<cffunction name="getDebugMode" access="Public" hint="Facade for the controller getDebugmode" returntype="boolean" output="false">	    <cfreturn controller.getDebugMode()>	</cffunction>	<cffunction name="getPlugin" 	access="Public" hint="Facade for controller getPlugin"  output="false" returntype="any">		<!--- ************************************************************* --->		<cfargument name="plugin" type="string" >		<!--- ************************************************************* --->		<cfreturn controller.getPlugin(arguments.plugin)>	</cffunction>		<cffunction name="getSetting" hint="Facade for controller getSetting" access="public"  returntype="any"  output="false">		<!--- ************************************************************* --->		<cfargument name="name" 		type="string">		<cfargument name="FWSetting" 	type="boolean" required="no" default="false" hint="Retrieve Framework Setting Flag">		<!--- ************************************************************* --->		<cfreturn controller.getSetting(arguments.name, arguments.FWSetting)>	</cffunction>	<cffunction name="getValue" returntype="Any" access="Public" hint="Facade for controller getValue" output="false">		<!--- ************************************************************* --->		<cfargument name="name" 			type="string" 	>		<cfargument name="defaultValue"		type="any" 	required="No" default="NONE">		<!--- ************************************************************* --->		<cfreturn controller.getValue(arguments.name, arguments.defaultValue)>	</cffunction>	<cffunction name="getResource" access="public" output="false" returnType="any" hint="Facade to i18n.getResource">		<!--- ************************************************************* --->		<cfargument name="resource" type="string" hint="The resource to retrieve from the bundle.">		<!--- ************************************************************* --->		<cfreturn getPlugin("i18n").getResource("#arguments.resource#")>	</cffunction>	<!--- ************************************************************* --->	<!--- OTHER FACADES' --->	<!--- ************************************************************* --->	<cffunction name="removeValue" access="Public" hint="Facade for the controller removeValue" output="false" returntype="void">		<cfargument name="name"  hint="The name of the variable to remove." type="string" >		<!--- ************************************************************* --->		<cfset controller.removeValue(arguments.name)>	</cffunction>	<cffunction name="runEvent" access="Public" returntype="void" hint="Facade for the controller runEvent" output="false">		<!--- ************************************************************* --->		<cfargument name="event" hint="The event to run." type="string">		<!--- ************************************************************* --->		<cfset controller.runEvent(arguments.event)>	</cffunction>	<cffunction name="valueExists" returntype="boolean" access="Public"	hint="Facade for the controller valueExists." output="false">		<!--- ************************************************************* --->		<cfargument name="name" hint="Name of the variable to return from the reqCollection" type="any">		<!--- ************************************************************* --->		<cfreturn controller.valueExists(arguments.name)>	</cffunction><!------------------------------------------- PRIVATE ------------------------------------------->	<cffunction name="throw" access="private" hint="Facade for cfthrow" output="false">		<cfargument name="message" 	type="string" 	required="yes">		<cfargument name="detail" 	type="string" 	required="no" default="">		<cfargument name="type"  	type="string" 	required="no" default="Framework">		<cfthrow type="#arguments.type#" message="#arguments.message#"  detail="#arguments.detail#">	</cffunction>	<cffunction name="dump" access="private" hint="Facade for cfmx dump">		<cfargument name="var" required="yes" type="any">		<cfdump var="#var#">	</cffunction>	<cffunction name="abort" access="private" hint="Facade for cfabort" output="false">		<cfabort>	</cffunction>	<cffunction name="include" access="private" hint="Facade for cfinclude" output="false">		<cfargument name="template" type="string">		<cfinclude template="#template#">	</cffunction></cfcomponent>