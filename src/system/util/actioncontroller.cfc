<!-----------------------------------------------------------------------Copyright 2005 - 2006 ColdBox Framework by Luis Majanowww.coldboxframework.com | www.coldboxframework.org-------------------------------------------------------------------------Author 	    :	Luis MajanoDate        :	August 21, 2006Description :	This is a cfc that contains method implementations for the base	cfc's eventhandler and plugin. This is an action base controller,	is where all action methods will be placed.	The front controller remains lean and mean.Modification History:08/21/2006 - Created10/10/2006 - Mail settings updated.12/08/2006 - Refactored.01/28/2006 - Datasource Alias resolved.-----------------------------------------------------------------------><cfcomponent name="actioncontroller" hint="This is the action controller cfc. Method implementations are done here for sharing between plugin and event handler controllers." output="false" extends="coldbox.system.controller"><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cffunction name="init" access="public" returntype="coldbox.system.util.actioncontroller" output="false">		<cfscript>		//memory reference for the request collection		variables.rc = getCollection();		//return actioncontroller		return this;		</cfscript>	</cffunction><!------------------------------------------- PUBLIC ------------------------------------------->		<!--- ************************************************************* --->		<cffunction name="setRC" access="Public" returntype="void" hint="I am a setter injection for the request collection"  output="false">		<cfargument name="requestCollection"     hint="The request collection." type="struct">		<!--- ************************************************************* --->	    <cfscript>		variables.rc = arguments.requestCollection;		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="setView" access="Public" returntype="void" hint="I Set the view to render in this request.I am called from event handlers. Request Collection Name: currentView, currentLayout"  output="false">		<cfargument name="name"     hint="The name of the view to set. If a layout has been defined it will assign it, else if will assign the default layout." type="string">		<cfargument name="nolayout" type="boolean" required="false" default="false" hint="Boolean flag, wether the view sent in will be using a layout or not. Default is false. Uses a pre set layout or the default layout.">		<!--- ************************************************************* --->	    <cfscript>		var viewLayouts = getSetting("ViewLayouts");	    if ( not arguments.nolayout ){		    if ( not getValue("layoutoverride",false) ){			    if ( StructKeyExists(viewLayouts, arguments.name) )					setValue("currentLayout",viewLayouts[arguments.name]);				else					setValue("currentLayout", getSetting("DefaultLayout"));			}		}		setValue("currentView",arguments.name);		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getCurrentView" access="public" hint="Gets the current set view" returntype="string" output="false">		<cfreturn getValue("currentView","")>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="setLayout" access="Public" returntype="void" hint="I Set the layout to override and render. Layouts are pre-defined in the config.xml file. However I can override these settings if needed. Do not append a the cfm extension. Request Collection name: currentLayout"  output="false">		<cfargument name="name"  hint="The name of the layout file to set." type="string" >		<!--- ************************************************************* --->	  	<cfscript>			setValue("currentLayout",trim(arguments.name) & ".cfm" );	  		setValue("layoutoverride",true);		</cfscript>	</cffunction>		<cffunction name="getCurrentLayout" access="public" hint="Gets the current set layout" returntype="string" output="false">		<cfreturn getValue("currentLayout","")>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getCurrentEvent" access="public" hint="Gets the current set event" returntype="string" output="false">		<cfreturn getValue("event","")>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="paramValue" returntype="void" access="Public"	hint="Just like cfparam, but for the request collection" output="false">		<cfargument name="name" 	hint="Name of the variable to param in the request collection" 	type="string">		<cfargument name="value" 	hint="The value of the variable to set if not found." 			type="Any" >		<!--- ************************************************************* --->		<cfscript>			if ( not valueExists(arguments.name) )				setValue(arguments.name, arguments.value);		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getCollection" returntype="any" access="Public" hint="I Get a reference or deep copy of the request Collection" output="false">		<cfargument name="DeepCopyFlag" hint="Default is false, gives a reference to the collection. True, creates a deep copy of the collection." type="boolean" required="no" default="false">		<cfscript>			if ( not structKeyExists(request,"reqCollection") )				return structnew();			else if ( arguments.DeepCopyFlag )				return duplicate(request.reqCollection);			else				return request.reqCollection; 		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="overrideEvent" access="Public" hint="I Override the current event in the request collection. This method does not execute the event, it just replaces the event to be executed by the framework's RunEvent() method. This method is usually called from an onRequestStart or onApplicationStart method."  output="false" returntype="void">		<cfargument name="event" hint="The name of the event to override." type="string">		<!--- ************************************************************* --->	    <cfscript>	    setValue("event",arguments.event);	    </cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getSettingStructure" hint="I get the entire setting structure. By default I retrieve the configStruct. You can change this by using the fwsetting flag." access="public" returntype="struct" output="false">		<!--- ************************************************************* --->		<cfargument name="FWSetting"  	type="boolean" 	 required="false"  hint="Boolean Flag. If true, it will retrieve from the fwSettingsStruct else the configStruct. Default is false." default="false">		<cfargument name="DeepCopyFlag" hint="Default is false. True, creates a deep copy of the structure." type="boolean" required="no" default="false">		<!--- ************************************************************* --->		<cfscript>		if (arguments.FWSetting){			if (arguments.DeepCopyFlag)				return duplicate(application.ColdBox_FWSettingsStruct);			else				return application.ColdBox_FWSettingsStruct;		}		else{			if (arguments.DeepCopyFlag)				return duplicate(application.ColdBox_configstruct);			else				return application.ColdBox_configstruct;		}		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getMyPlugin" access="public" hint="Get a custom plugin" returntype="any" output="false">		<!--- ************************************************************* --->		<cfargument name="plugin" type="string" hint="The Plugin object's name to instantiate" required="true" >		<!--- ************************************************************* --->		<cfscript>		try{			return CreateObject("component", "#getSetting("MyPluginsLocation")#.#trim(arguments.plugin)#").init();		}		catch(Any e){			throw("Error Instantiating Plugin Object (#getSetting("MyPluginsLocation")#.#trim(arguments.plugin)#)","#e.Message# #e.detail#","Framework.actioncontroller.InvalidPluginInstantiationException");		}		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getDatasource" access="public" output="false" returnType="any" hint="I will return to you a datasourceBean according to the name of the datasource you wish to get from the configstruct (config.xml)">		<!--- ************************************************************* --->		<cfargument name="alias" type="string" hint="The alias of the datasource to get from the configstruct (alias property in the config.xml)">		<!--- ************************************************************* --->		<cfscript>		var datasources = getSetting("Datasources");		//Check for datasources structure		if ( structIsEmpty(datasources) ){			throw("There are no datasources defined for this application.","","Framework.actioncontroller.DatasourceStructureEmptyException");		}		//Try to get the correct datasource.		if ( structKeyExists(datasources, arguments.alias) ){			return getPlugin("beanFactory").create("coldbox.system.beans.datasourceBean").init(datasources[arguments.alias]);		}		else{			throw("The datasource: #arguments.alias# is not defined.","","Framework.actioncontroller.DatasourceNotFoundException");		}		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getfwLocale" access="public" output="false" returnType="string" hint="Get the default locale string used in the framework.">		<cfscript>			switch(getSetting("LocaleStorage")){				//session				case "session":					if ( not structKeyExists(session,"DefaultLocale") ){						getPlugin("i18n").setfwLocale(getSetting("DefaultLocale"));					}					return session.DefaultLocale;					break;								//client				case "client":					if ( not structKeyExists(client,"DefaultLocale") ){						getPlugin("i18n").setfwLocale(getSetting("DefaultLocale"));					}					return client.DefaultLocale;					break;								//default								default:					throw("The default settings in your config are blank. Please make sure you create the i18n elements.","","Framework.actioncontroller.i18N.DefaultSettingsInvalidException");							}		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getMailSettings" access="public" output="false" returnType="any" hint="I will return to you a mailsettingsBean modeled after your mail settings in your config.xml">		<cfscript>		return getPlugin("beanFactory").create("coldbox.system.beans.mailsettingsBean").init(getSetting("MailServer"),getSetting("MailUsername"),getSetting("MailPassword"), getSetting("MailPort"));		</cfscript>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="getResource" access="public" output="false" returnType="any" hint="Facade to i18n.getResource">		<!--- ************************************************************* --->		<cfargument name="resource" type="string" hint="The resource to retrieve from the bundle.">		<!--- ************************************************************* --->		<cfreturn getPlugin("resourceBundle").getResource("#arguments.resource#")>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="filterQuery" access="public" returntype="query" hint="Filters a query by the given value" output="false">		<!--- ************************************************************* --->		<cfargument name="qry" 			type="query" 	required="yes" hint="Query to filter">		<cfargument name="field" 		type="string" 	required="yes" hint="Field to filter on">		<cfargument name="value" 		type="string" 	required="yes" hint="Value to filter on">		<cfargument name="cfsqltype" 	type="string" 	required="no" default="cf_sql_varchar" hint="The cf sql type of the value.">		<!--- ************************************************************* --->		<cfset var qryNew = QueryNew("")>		<cfquery name="qryNew" dbtype="query">			SELECT *				FROM arguments.qry				WHERE #trim(arguments.field)# = <cfqueryparam cfsqltype="#trim(arguments.cfsqltype)#" value="#trim(arguments.value)#">		</cfquery>		<cfreturn qryNew>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="sortQuery" access="public" returntype="query" hint="Sorts a query by the given field" output="false">		<!--- ************************************************************* --->		<cfargument name="qry" 			type="query" 	required="yes" hint="Query to sort">		<cfargument name="sortBy" 		type="string" 	required="yes" hint="Sort by column(s)">		<cfargument name="sortOrder" 	type="string" 	required="no" default="ASC" hint="ASC/DESC">		<!--- ************************************************************* --->		<cfset var qryNew = QueryNew("")>		<!--- Validate sortOrder --->		<cfif not reFindnocase("(asc|desc)", arguments.sortOrder)>			<cfthrow type="Framework.sharedLibrary.InvalidSortOrderException" message="The sortOrder you sent in: #arguments.sortOrder# is not valid. Valid sort orders are ASC|DESC">		</cfif>		<cfquery name="qryNew" dbtype="query">			SELECT *				FROM arguments.qry				ORDER BY #trim(Arguments.SortBy)# #Arguments.SortOrder#		</cfquery>		<cfreturn qryNew>	</cffunction>		<!--- ************************************************************* --->	<!------------------------------------------- PRIVATE ------------------------------------------->		<cffunction name="dump" access="private" hint="Facade for cfmx dump" returntype="void">		<!--- ************************************************************* --->		<cfargument name="var" required="yes" type="any">		<!--- ************************************************************* --->		<cfdump var="#var#">	</cffunction>		<!--- ************************************************************* --->		<cffunction name="abort" access="private" hint="Facade for cfabort" returntype="void" output="false">		<cfabort>	</cffunction>		<!--- ************************************************************* --->		<cffunction name="include" access="private" hint="Facade for cfinclude" returntype="void" output="false">		<!--- ************************************************************* --->		<cfargument name="template" type="string">		<!--- ************************************************************* --->		<cfinclude template="#template#">	</cffunction>		<!--- ************************************************************* --->		<cffunction name="relocate" access="private" hint="Facade for cflocation" returntype="void" output="false">		<!--- ************************************************************* --->		<cfargument name="url" 		type="string" 	required="true">		<cfargument name="addtoken" type="boolean" 	required="false" default="false">		<!--- ************************************************************* --->		<cflocation urL="#arguments.url#" addtoken="#arguments.addtoken#">	</cffunction>		<!--- ************************************************************* --->	</cfcomponent>