<!-----------------------------------------------------------------------Author: Luis MajanoDate:   September 27, 2005Description: This is the framework's logger object. It performs all necessary			 loggin procedures.Modifications:09/25/2005 - Created the template.10/13/2005 - Updated the reqCollection to the request scope.12/18/2005 - Using mailserverSettings from config.xml now, fixed structnew for default to logError12/20/2005 - Bug on spaces for log files.02/16/2006 - Fixes for subjects06/28/2006 - Updates for coldbox07/12/2006 - Tracer updates-----------------------------------------------------------------------><cfcomponent name="logger"			 hint="This is the frameworks logger object. It is used for all logging procedures."			 extends="plugin">	<!--- ************************************************************* --->	<cffunction name="init" access="public" returntype="any" hint="Constructor" output="false">		<cfargument name="controller" required="yes" hint="The reference to the framework controller">		<cfset super.Init(arguments.controller) />		<cfreturn this>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="tracer" access="Public" hint="Log a trace message" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="message"    hint="Message to Send" type="string" required="Yes" >		<cfargument name="ExtraInfo"  hint="Extra Information to dump on the trace" required="No" default="" type="any">		<!--- ************************************************************* --->		<cfscript>		var tracerEntry = StructNew();		if ( not valueExists("tracerStack") )			setValue("tracerStack",ArrayNew(1));		//Insert Message & Info		StructInsert(tracerEntry,"message", arguments.message);		if ( not isSimpleValue(arguments.ExtraInfo) )			StructInsert(tracerEntry,"ExtraInfo", duplicate(arguments.ExtraInfo));		else			StructInsert(tracerEntry,"ExtraInfo", arguments.ExtraInfo);		   ArrayAppend(getValue("tracerStack"),tracerEntry);		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="logErrorWithBean" access="public" hint="Log an error into the framework using a coldbox exceptionBean" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="ExceptionBean" 	type="any" 	required="yes">		<!--- ************************************************************* --->		<!--- Initialize variables --->		<cfset var Exception = arguments.ExceptionBean>		<cfset var BugReport = "">		<cfset var logSubject = "">		<cfset var errorText = "">		<cfset var arrayTagContext = "">		<!--- Coldfusion Loggin Enabled? --->		<cfif getSetting("ColdfusionLogging")>			<cfset errorText = "#getSetting("AppName")# Error. Extra Message: #Exception.getExtraMessage()#.">			<cfif isStruct(Exception.getExceptionStruct())>				<cfif Exception.getDetail() neq  "">					<cfset errorText = errorText & " Details: #Exception.getDetail()# ">				</cfif>				<cfif Exception.getMessage() neq "">					<cfset errorText = errorText & " Message: #Exception.getMessage()#">				</cfif>				<cfif Exception.getStackTrace() neq "">					<cfset errorText = errorText & chr(13) & chr(13) & "#Exception.getStackTrace()#">				</cfif>			</cfif>			<!--- Coldfusion Log Entry --->			<cflog type="error"				   text="#errorText#"				   file="#replace(getSetting("AppName")," ","","all")#_BugTrackingErrors">		</cfif>		<!--- Check if Bug Reports are Enabled, then send Emails. --->		<cfif getSetting("EnableBugReports") and getSetting("BugEmails") neq "">			<!--- Save the Bug Report --->			<cfsavecontent variable="BugReport"><cfinclude template="../includes/BugReport.cfm"></cfsavecontent>			<!--- Setup The Subject --->			<cfset logSubject = "#getSetting("Codename",1)# Bug Report: #getSetting("Environment")# - #getSetting("appname")#">			<!--- Check for Custom Mail Settings or use CFMX Administrator Settings --->			<cfif getSetting("MailServer") neq "">				<!--- Mail New Bug --->				<cfmail to="#getSetting("BugEmails")#"						from="#getSetting("OwnerEmail")#"						subject="#logSubject#"						type="html"						server="#getSetting("MailServer")#"						username="#getSetting("MailUsername")#"						password="#getSetting("MailPassword")#">#BugReport#</cfmail>			<cfelse>				<!--- Mail New Bug --->				<cfmail to="#getSetting("BugEmails")#"						from="#getSetting("OwnerEmail")#"						subject="#logSubject#"						type="html"						username="#getSetting("MailUsername")#"						password="#getSetting("MailPassword")#">#BugReport#</cfmail>			</cfif>		</cfif>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="logError" access="public" hint="Log an error into the framework using arguments. Facade to logErrorWithBean." output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="Message" 			type="string" 	required="yes">		<cfargument name="ExceptionStruct" 	type="any"    	required="no" default="#StructNew()#" hint="The CF cfcatch structure.">		<cfargument name="ExtraInfo"  		type="any"    	required="no" default="">		<!--- ************************************************************* --->		<cfset logErrorWithBean(getPlugin("beanFactory").create("beans.exception").init(arguments.ExceptionStruct,arguments.message,arguments.ExtraInfo))>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="logEntry" access="public" hint="Log a message to the Coldbox Logging Facility." output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="Severity" 		type="string" 	required="yes" hint="error|warning|info">		<cfargument name="Message" 			type="string"  	required="yes" hint="The message to log.">		<!--- ************************************************************* --->		<!--- write code here --->					</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="initLogLocation" access="public" hint="Initialize the log location." output="false" returntype="void">		<cfset var LogFilename = URLEncodedFormat(replace(getSetting("AppName")," ","","all")) & ".log">		<cfset var LogCompletePath = getSetting("ColdboxLogsLocation") & getSetting("OSFileSeparator",1) & LogFilename>		<cfmodule template="../includes/timer.cfm" timertag="Initializing Log Location [#LogCompletePath#]">			<!--- This method will verify the log location and create the first log file --->			<cfif not directoryExists(getSetting("ColdboxLogsLocation"))>				<cfthrow type="Framework.logger.ColdboxLogsLocationNotFoundException" message="The directory: #getSetting("ColdboxLogsLocation")# cannot be located or does not exist. Please verify your entry in your config.xml.cfm">			</cfif>			<!--- Create Log File if It does not exist --->			<cfif not fileExists(LogCompletePath)>				<cfset getPlugin("fileUtilities").createFile(LogCompletePath)>			</cfif>			<!--- Check if we can write to the file --->			<cfif not getPlugin("fileUtilities").FileCanWrite(LogCompletePath)>				<cfthrow type="Framework.logger.LogFileNotWritableException" message="The log file: #LogCompletePath# is not a writable file. Please check your operating system's permissions.">			</cfif>		</cfmodule>	</cffunction>	<!--- ************************************************************* --->	</cfcomponent>