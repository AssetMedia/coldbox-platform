<!-----------------------------------------------------------------------Author: Luis MajanoDate:   September 27, 2005Description: This is the framework's logger object. It performs all necessary			 loggin procedures.Modifications:09/25/2005 - Created the template.10/13/2005 - Updated the reqCollection to the request scope.12/18/2005 - Using mailserverSettings from config.xml now, fixed structnew for default to logError12/20/2005 - Bug on spaces for log files.02/16/2006 - Fixes for subjects06/28/2006 - Updates for coldbox07/12/2006 - Tracer updates-----------------------------------------------------------------------><cfcomponent name="logger"			 hint="This is the frameworks logger object. It is used for all logging facilities."			 extends="coldbox.system.plugin">			 <!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cfset variables.instance = structnew()>	<cfset variables.instance.logfilename = "">	<cfset variables.instance.logFileEncoding = "">	<cfset variables.instance.logFileBufferSize = "">	<cfset variables.instance.logFullPath = "">		<!--- ************************************************************* --->	<cffunction name="init" access="public" returntype="any" hint="Constructor" output="false">		<cfargument name="controller" required="yes" hint="The reference to the framework controller">		<cfset super.Init(arguments.controller) />		<!--- Set the cfc properties --->		<cfset setLogFileName(URLEncodedFormat(replace(getSetting("AppName")," ","","all")))>		<cfset setLogFileEncoding(getSetting("LogFileEncoding",1))>		<cfset setLogFileBufferSize(getSetting("LogFileBufferSize",1))>		<cfset setlogFullPath(getSetting("ColdboxLogsLocation"))>		<!--- Return --->		<cfreturn this>	</cffunction>	<!--- ************************************************************* --->	<!------------------------------------------- PUBLIC ------------------------------------------->	<!--- ************************************************************* --->	<cffunction name="tracer" access="Public" hint="Log a trace message" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="message"    hint="Message to Send" type="string" required="Yes" >		<cfargument name="ExtraInfo"  hint="Extra Information to dump on the trace" required="No" default="" type="any">		<!--- ************************************************************* --->		<cfscript>		var tracerEntry = StructNew();		if ( not valueExists("tracerStack") )			setValue("tracerStack",ArrayNew(1));		//Insert Message & Info		StructInsert(tracerEntry,"message", arguments.message);		if ( not isSimpleValue(arguments.ExtraInfo) )			StructInsert(tracerEntry,"ExtraInfo", duplicate(arguments.ExtraInfo));		else			StructInsert(tracerEntry,"ExtraInfo", arguments.ExtraInfo);		   ArrayAppend(getValue("tracerStack"),tracerEntry);		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="logErrorWithBean" access="public" hint="Log an error into the framework using a coldbox exceptionBean" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="ExceptionBean" 	type="any" 	required="yes">		<!--- ************************************************************* --->		<!--- Initialize variables --->		<cfset var Exception = arguments.ExceptionBean>		<cfset var BugReport = "">		<cfset var logSubject = "">		<cfset var errorText = "">		<cfset var arrayTagContext = "">		<!--- Coldfusion Loggin Enabled? --->		<cfif getSetting("EnableColdfusionLogging")>			<cfset errorText = "#getSetting("AppName")# Error. Extra Message: #Exception.getExtraMessage()#.">			<cfif isStruct(Exception.getExceptionStruct())>				<cfif Exception.getDetail() neq  "">					<cfset errorText = errorText & " Details: #Exception.getDetail()# ">				</cfif>				<cfif Exception.getMessage() neq "">					<cfset errorText = errorText & " Message: #Exception.getMessage()#">				</cfif>				<cfif Exception.getStackTrace() neq "">					<cfset errorText = errorText & chr(13) & chr(13) & "#Exception.getStackTrace()#">				</cfif>			</cfif>			<!--- Coldfusion Log Entry --->			<cflog type="error"				   text="#errorText#"				   file="#getLogFileName()#">		</cfif>		<!--- Check if Bug Reports are Enabled, then send Emails. --->		<cfif getSetting("EnableBugReports") and getSetting("BugEmails") neq "">			<!--- Save the Bug Report --->			<cfsavecontent variable="BugReport"><cfinclude template="../includes/BugReport.cfm"></cfsavecontent>			<!--- Setup The Subject --->			<cfset logSubject = "#getSetting("Codename",1)# Bug Report: #getSetting("Environment")# - #getSetting("appname")#">			<!--- Check for Custom Mail Settings or use CFMX Administrator Settings --->			<cfif getSetting("MailServer") neq "">				<!--- Mail New Bug --->				<cfmail to="#getSetting("BugEmails")#"						from="#getSetting("OwnerEmail")#"						subject="#logSubject#"						type="html"						server="#getSetting("MailServer")#"						username="#getSetting("MailUsername")#"						password="#getSetting("MailPassword")#">#BugReport#</cfmail>			<cfelse>				<!--- Mail New Bug --->				<cfmail to="#getSetting("BugEmails")#"						from="#getSetting("OwnerEmail")#"						subject="#logSubject#"						type="html"						username="#getSetting("MailUsername")#"						password="#getSetting("MailPassword")#">#BugReport#</cfmail>			</cfif>		</cfif>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="logError" access="public" hint="Log an error into the framework using arguments. Facade to logErrorWithBean." output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="Message" 			type="string" 	required="yes">		<cfargument name="ExceptionStruct" 	type="any"    	required="no" default="#StructNew()#" hint="The CF cfcatch structure.">		<cfargument name="ExtraInfo"  		type="any"    	required="no" default="">		<!--- ************************************************************* --->		<cfset logErrorWithBean(getPlugin("beanFactory").create("coldbox.system.beans.exception").init(arguments.ExceptionStruct,arguments.message,arguments.ExtraInfo))>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="logEntry" access="public" hint="Log a message to the Coldbox Logging Facility." output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="Severity" 		type="string" 	required="yes" hint="error|warning|info">		<cfargument name="Message" 			type="string"  	required="yes" hint="The message to log.">		<cfargument name="ExtraInfo"		type="string"   required="no" default="" hint="Extra information to append.">		<!--- ************************************************************* --->		<cfset var FileWriter = getPlugin("FileWriter").setup(getlogFullPath(),getLogFileEncoding(),getLogFileBufferSize())>		<!--- Check for Severity via RE --->		<cfif not reFindNoCase("^(info|warning|error)$",arguments.Severity)>			<cfthrow type="Framework.plugins.logger.InvalidSeverityException" message="The severity you entered: #arguments.severity# is an invalid severity. Valid severities are info, error, and warning.">		</cfif>			<!--- Log a new Entry --->		<cfset FileWriter.writeLine(formatLogEntry(arguments.severity,arguments.message,arguments.extraInfo))>		<cfset FileWriter.close()>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="initLogLocation" access="public" hint="Initialize the ColdBox log location." output="false" returntype="void">		<cfset var LogFilename = getLogFileName() & ".log">		<cfset var LogCompletePath = "">		<cfset var FileWriter = "">		<cfset var InitString = "">		<cfmodule template="../includes/timer.cfm" timertag="Initializing Coldbox Log Location">			<!--- Test for Relative Path First --->			<cfif directoryExists(expandPath(getSetting("ColdboxLogsLocation")))>				<!--- It is a relative path, once expanded. Save this as the location. --->				<cfset setSetting("ColdboxLogsLocation", expandPath(getSetting("ColdboxLogsLocation"))) >			<cfelseif not directoryExists(getSetting("ColdboxLogsLocation"))>				<!--- Directory not verified by relative or absolute, throw error --->				<cfthrow type="Framework.plugins.logger.ColdboxLogsLocationNotFoundException" message="The directory: #getSetting("ColdboxLogsLocation")# cannot be located or does not exist. Please verify your entry in your config.xml.cfm">			</cfif>						<!--- Then set the complete log path and save. --->			<cfset LogCompletePath = getSetting("ColdboxLogsLocation") & getSetting("OSFileSeparator",1) & LogFilename>			<cfset setSetting("ColdboxLogsLocation", LogCompletePath)>						<!--- Create Log File if It does not exist --->			<cfif not fileExists(LogCompletePath)>				<cfset getPlugin("fileUtilities").createFile(LogCompletePath)>			</cfif>			<!--- Check if we can write to the file --->			<cfif not getPlugin("fileUtilities").FileCanWrite(LogCompletePath)>				<cfthrow type="Framework.plugins.logger.LogFileNotWritableException" message="The log file: #LogCompletePath# is not a writable file. Please check your operating system's permissions.">			</cfif>			<!--- Init the Log File, with framework's default encoding and buffer size --->			<cfset FileWriter = getPlugin("FileWriter").setup(LogCompletePath,getLogFileEncoding(),getLogFileBufferSize())>			<!--- 				Log Format				"[severity]" "[date]" "[time]" "[message]" "[extrainfo]"			--->			<cfset InitString = '"Severity","Date","Time","Message","ExtraInfo"'>			<cfset FileWriter.writeLine(InitString)>			<cfset FileWriter.writeLine(formatLogEntry("info","The log file has been initialized successfully by ColdBox.","Log file: #LogCompletePath#; Encoding: #getSetting("LogFileEncoding",1)#; BufferSize: #getSetting("LogFileBufferSize",1)#"))>			<cfset FileWriter.close()>		</cfmodule>	</cffunction>	<!--- ************************************************************* ---><!------------------------------------------- ACCESSOR/MUTATORS ------------------------------------------->		<!--- ************************************************************* --->	<cffunction name="setLogFileName" access="public" hint="Set the logfilename" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="filename" 		type="string" 	required="yes" hint="The filename to set">		<!--- ************************************************************* --->		<cfset variables.instance.logfilename = arguments.filename>		</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getLogFileName" access="public" hint="Get the logfilename" output="false" returntype="string">		<cfreturn variables.instance.logfilename >	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="setlogFullPath" access="public" hint="Set the logFullPath" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="logFullPath" 		type="string" 	required="yes" hint="The logFullPath to set">		<!--- ************************************************************* --->		<cfset variables.instance.logFullPath = arguments.logFullPath>		</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getlogFullPath" access="public" hint="Get the logFullPath" output="false" returntype="string">		<cfreturn variables.instance.logFullPath >	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="setLogFileEncoding" access="public" hint="Set the LogFileEncoding" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="LogFileEncoding" 		type="string" 	required="yes" hint="The LogFileEncoding to set">		<!--- ************************************************************* --->		<cfset variables.instance.LogFileEncoding = arguments.LogFileEncoding>		</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getLogFileEncoding" access="public" hint="Get the LogFileEncoding" output="false" returntype="string">		<cfreturn variables.instance.LogFileEncoding >	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="setlogFileBufferSize" access="public" hint="Set the logFileBufferSize" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="logFileBufferSize" 		type="string" 	required="yes" hint="The logFileBufferSize to set">		<!--- ************************************************************* --->		<cfset variables.instance.logFileBufferSize = arguments.logFileBufferSize>		</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getlogFileBufferSize" access="public" hint="Get the logFileBufferSize" output="false" returntype="string">		<cfreturn variables.instance.logFileBufferSize >	</cffunction>	<!--- ************************************************************* --->	<!------------------------------------------- PRIVATE ------------------------------------------->		<!--- ************************************************************* --->	<cffunction name="formatLogEntry" access="private" hint="Format a log request into the specified entry format." output="false" returntype="string">		<!--- ************************************************************* --->		<cfargument name="Severity" 		type="string" 	required="yes" hint="error|warning|info">		<cfargument name="Message" 			type="string"  	required="yes" hint="The message to log.">		<cfargument name="ExtraInfo"		type="string"   required="no" default="" hint="Extra information to append.">		<!--- ************************************************************* --->		<!--- Manipulate Arguments --->		<cfset arguments.severity = trim(lcase(arguments.severity))>		<cfset arguments.Message = replacenocase(arguments.message,chr(34),'','all')>		<cfset arguments.ExtraInfo = replacenocase(arguments.ExtraInfo,chr(34),'','all')>		<cfreturn '"#arguments.Severity#","#dateformat(now(),"MM/DD/YYYY")#","#timeformat(now(),"HH:MM:SS")#","#arguments.message#","#arguments.extrainfo#"'>	</cffunction>	<!--- ************************************************************* --->	</cfcomponent>