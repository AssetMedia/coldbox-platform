<!-----------------------------------------------------------------------author:         paul hastings <paul@sustainableGIS.com>date:           1-April-2004revisions:      25-jun-2004 added locale number formating                       7-jul-2004      added localized digit parsing                       11-jul-2004     added to/from Arabic-Indic digit functions                       12-jul-2004 added metadata function, getDecimalSymbols                       13-jul-2004 added localized country and language display functions, showLocaleCountry & showLocaleLanguage                       16-jul-2004 added method to return namepart for filtering/sorting on per locale basis                       16-aug-2004     added method to delete unicode named files/dirs                       3-feb-2005 swapped to ulocales                       20-feb-2005 added getCurrencySymbol method                       9-jul-2005 added i18nBigDecimalFormat                       30-may-2006 swapped to using java epoch offsets from datetimes                       16-jun-2006 added date math methods                       8-jul-2006 version for coldboxnotes:this CFC contains a several util I18N functions. all valid java locales are supported. it requires the useof cfobject.methods in this CFC:       - getLocales returns LIST of java style locales (en_US,etc.) available on this server. PUBLIC       - getLocaleNames returns LIST of java style locale names available on this server. PUBLIC       - isBIDI returns boolean indicating whether given locale uses lrt to rtl writing sysem direction.       required argument is thisLocale. PUBLIC       - isValidLocale returns BOOLEAN indicating whether a given locale is valid on this server. should       be used for locale validation prior to passing to this CFC. takes one required argument, thisLocale,       string such as "en_US", "th_TH", etc. PUBLIC       - showCountry: returns country display name in english from given locale, takes       one required argument, thisLocale. returns string. PUBLIC       - showLanguage: returns language display name in english from given locale, takes       one required argument, thisLocale. returns string. PUBLIC       - showLocaleCountry: returns localized country display name from given locale, takes       one required argument, thisLocale. returns string. PUBLIC       - showLocaleLanguage: returns localized language display name from given locale, takes       one required argument, thisLocale. returns string. PUBLIC       - getDecimalSymbols METADATA function, returns structure holding various decimal format symbols for       given locale. required argument is thisLocale, valid java style locale. PUBLIC       - getCurrencySymbol METADATA function, returns international (USD, THB,       etc.) or localized  currency symbol for given locale. required argument is thisLocale,       valid java style locale. optional boolean argument is localized to return localized or       international currency symbol. defaults to true (localized). PUBLICModifications08/20/2006 Luis Majano - Modified for ColdBox-----------------------------------------------------------------------><cfcomponent name="i18n"			 hint="This is the i18N plugin based on Paul Hastings cfc. It uses standard Java locale names and has its own storage mechanism via RBundles['Locale'].  In order to use the plugin, you must instantiate it and call its setfwLocale() method with the appropriate locale to initialize with. Then you may use its methods."			 extends="coldbox.system.plugin"><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<!--- ************************************************************* --->	<cffunction name="init" access="public" returntype="any" hint="Constructor" output="false">		<cfscript>		super.Init();		variables.instance.pluginName = "Internationalization (i18N)";		variables.instance.pluginVersion = "1.0.0 coldbox core java";		variables.instance.pluginDescription = "Internationalization and Bundles plugin based on Paul Hastings Brain.";		//<!--- This plugin's properties --->		variables.instance.aDFSymbol=createObject("java","java.text.DecimalFormatSymbols");		variables.instance.aDateFormat=createObject("java","java.text.DateFormat");		variables.instance.aLocale=createObject("java","java.util.Locale");		variables.instance.timeZone=createObject("java","java.util.TimeZone");		variables.instance.thisLocale = ""; //Setup by the loadLocale() method.		loadLocale();		variables.instance.aCalendar=createObject("java","java.util.GregorianCalendar").init(variables.instance.thisLocale);		variables.instance.dateSymbols = createObject("java","java.text.DateFormatSymbols").init(variables.instance.thisLocale);		variables.instance.I18NUtilDate="23-aug-2006"; //should be date of latest change		return this;		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="init_i18N" access="public" output="No" hint="Reads,parses,saves the locale and resource bundles defined in the config.xml. Called only internally by the framework. Use at your own risk" returntype="void">		<!--- ************************************************************* --->		<cfargument name="rbFile"   required="Yes" type="string" hint="This must be the path + filename UP to but NOT including the locale. We auto-add .properties to the end.">		<cfargument name="rbLocale" required="No"  type="string" default="en_US">		<!--- ************************************************************* --->		<!--- Set the default Locale --->		<cfset setfwLocale(arguments.rbLocale,true)>		<!--- Test for rbFile --->		<cfif arguments.rbFile neq "">			<!--- Load the default Bundle --->			<cfset getPlugin("resourceBundle").loadBundle(arguments.rbFile, arguments.rbLocale)>		</cfif>	</cffunction>	<!--- ************************************************************* --->	<!------------------------------------------- PUBLIC ------------------------------------------->		<!--- ************************************************************* --->	<cffunction name="setfwLocale" access="public" output="false" returnType="any" hint="Set the default locale to use in the framework.">		<!--- ************************************************************* --->		<cfargument name="locale"     		type="string"  required="false"  default="#getSetting("DefaultLocale")#"   hint="The locale to change and set. Must be Java Style: en_US">		<cfargument name="dontloadRBFlag" 	type="boolean" required="false"  default="false" hint="Flag to load the resource bundle for the specified locale (If not already loaded) or just change the framework's locale.">		<!--- ************************************************************* --->				<!--- Resource Bundle Loading Check --->		<cfif getSetting("DefaultResourceBundle") neq "">			<cfif not arguments.dontloadRBFlag and not structKeyExists(getSetting("RBundles"),arguments.locale)>				<cfset getPlugin("resourceBundle").loadBundle(getSetting("DefaultResourceBundle"),arguments.locale)>			</cfif>		</cfif>				<!--- Storage of the Locale --->		<cfif getSetting("LocaleStorage") eq "session">			<cfset session.DefaultLocale = arguments.locale>		<cfelse>			<cfset client.DefaultLocale = arguments.locale>		</cfif>				<!--- Locale Instance Setup --->		<cfset loadLocale(arguments.locale)>				<cfreturn this>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="loadLocale" access="public" returnType="void" output="false"  hint="Loads a locale.">		<!--- ************************************************************* --->		<cfargument name="locale" type="string" required="false" default="en_US" />	    <!--- ************************************************************* --->		<cfif not isValidLocale(arguments.locale)>			<cfthrow message="Specified locale must be of the form language_COUNTRY_VARIANT where language, country and variant are 2 characters each, ISO 3166 standard." type="Framework.plugins.i18n.InvalidLocaleException" detail="The locale tested is: #arguments.locale#" />		</cfif>		<cfset instance.thisLocale = buildLocale(arguments.locale) />	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="isValidLocale"  access="public" output="false" returntype="boolean" hint="Validate a locale">		<!--- ************************************************************* --->		<cfargument name="thisLocale" required="yes" type="string" hint="Locale to validate">		<!--- ************************************************************* --->		<cfif listFind(arrayToList(getLocales()),arguments.thisLocale)>			<cfreturn true>		<cfelse>			<cfreturn false>		</cfif>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getLocales" access="public" output="false" returntype="array" hint="returns array of locales">    	<cfreturn instance.aLocale.getAvailableLocales()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction access="public" name="getLocaleNames" output="false" returntype="string" hint="returns list of locale names, UNICODE direction char (LRE/RLE) added as required">	<cfscript>	       var orgLocales=getLocales();	       var theseLocales="";	       var thisName="";	       var i=0;	       for (i=1; i LTE arrayLen(orgLocales); i=i+1) {	               if (listLen(orgLocales[i],"_") EQ 2) {	                       if (left(orgLocales[i],2) EQ "ar" or left(orgLocales[i],2) EQ "iw")	                               thisName=chr(8235)&orgLocales[i].getDisplayName(orgLocales[i])&chr(8234);	                       else	                               thisName=orgLocales[i].getDisplayName(orgLocales[i]);	                       theseLocales=listAppend(theseLocales,thisName);	               } // if locale more than language	       } //for	       return theseLocales;	</cfscript>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getISOlanguages"  access="public" output="false" returntype="array" hint="returns array of 2 letter ISO languages">    	<cfreturn instance.aLocale.getISOLanguages()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getISOcountries" access="public"  output="false" returntype="array" hint="returns array of 2 letter ISO countries">    	<cfreturn instance.aLocale.getISOCountries()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="showCountry" access="public" output="false" returntype="string" hint="returns display country name for given locale">       <cfreturn instance.thisLocale.getDisplayCountry()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="showISOCountry" access="public" output="false" returntype="string" hint="returns 2-letter ISO country name for given locale">		<cfreturn instance.thisLocale.getCountry()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="showLanguage" access="public" output="false" returntype="string" hint="returns display country name for given locale">		<cfreturn instance.thisLocale.getDisplayLanguage()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="showLocaleCountry" access="public" output="false" returntype="string" hint="returns display country name for given locale">		<cfreturn instance.thisLocale.getDisplayCountry(variables.thisLocale)>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="showLocaleLanguage" access="public" output="false" returntype="string" hint="returns display country name for given locale">		<cfreturn instance.thisLocale.getDisplayLanguage(variables.thisLocale)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<!--- core java uses 'iw' for hebrew, leaving 'he' just in case this is a version thing --->	<cffunction name="isBidi" access="public" output="No" returntype="boolean" hint="determines if given locale is BIDI">		<cfif listFind("ar,iw,fa,ps,he",left(instance.thisLocale.toString(),2))>			<cfreturn true>		<cfelse>			<cfreturn false>		</cfif>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getCurrencySymbol" access="public" returntype="string" output="false" hint="returns currency symbol for this locale">		<!--- ************************************************************* --->		<cfargument name="localized" required="no" type="boolean" default="true" hint="return international (USD, THB, etc.) or localized ($,etc.) symbol">		<!--- ************************************************************* --->		<cfset var aCurrency=createObject("java","com.ibm.icu.util.Currency")>		<cfset var tmp=arrayNew(1)>		<cfif arguments.localized>			<cfset arrayAppend(tmp,true)>		    <cfreturn aCurrency.getInstance(instance.thisLocale).getName(instance.thisLocale,aCurrency.SYMBOL_NAME,tmp)>		<cfelse>		    <cfreturn aCurrency.getInstance(instance.thisLocale).getCurrencyCode()>		</cfif>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getDecimalSymbols"  access="public"  output="false" returntype="struct" hint="returns strucure holding decimal format symbols for this locale">	<cfscript>	       var dfSymbols=instance.aDFSymbol.init(instance.thisLocale);	       var symbols=structNew();	       symbols.plusSign=dfSymbols.getPlusSign().toString();	       symbols.Percent=dfSymbols.getPercent().toString();	       symbols.minusSign=dfSymbols.getMinusSign().toString();	       symbols.currencySymbol=dfSymbols.getCurrencySymbol().toString();	       symbols.internationCurrencySymbol=dfSymbols.getInternationalCurrencySymbol().toString();	       symbols.monetaryDecimalSeparator=dfSymbols.getMonetaryDecimalSeparator().toString();	       symbols.exponentSeparator=dfSymbols.getExponentSeparator().toString();	       symbols.perMille=dfSymbols.getPerMill().toString();	       symbols.decimalSeparator=dfSymbols.getDecimalSeparator().toString();	       symbols.groupingSeparator=dfSymbols.getGroupingSeparator().toString();	       symbols.zeroDigit=dfSymbols.getZeroDigit().toString();	       return symbols;	</cfscript>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="i18nDateTimeFormat" access="public" output="No" returntype="string">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="yes" type="numeric" hint="java epoch offset">		<cfargument name="thisDateFormat" default="1" required="No" type="numeric" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<cfargument name="thisTimeFormat" default="1" required="No" type="numeric" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var tDateFormat=javacast("int",arguments.thisDateFormat)>	       <cfset var tTimeFormat=javacast("int",arguments.thisTimeFormat)>	       <cfset var tDateFormatter=instance.aDateFormat.getDateTimeInstance(tDateFormat,tTimeFormat,instance.thisLocale)>	       <cfset var tTZ=instance.timeZone.getTimezone(arguments.tz)>	       <cfset tDateFormatter.setTimezone(tTZ)>	       <cfreturn tDateFormatter.format(arguments.thisOffset)>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="i18nDateFormat" access="public" output="No" returntype="string">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="yes" type="numeric" hint="java epoch offset">		<cfargument name="thisDateFormat" default="1" required="No" type="numeric" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->		   <cfset var tDateFormat=javacast("int",arguments.thisDateFormat)>	       <cfset var tDateFormatter=instance.aDateFormat.getDateInstance(tDateFormat,instance.thisLocale)>	       <cfset var tTZ=instance.timeZone.getTimezone(arguments.tz)>	       <cfset tDateFormatter.setTimezone(tTZ)>	       <cfreturn tDateFormatter.format(arguments.thisOffset)>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="i18nTimeFormat" access="public" output="No" returntype="string">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="yes" type="numeric" hint="java epoch offset">		<cfargument name="thisTimeFormat" default="1" required="No" type="numeric" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">	    <!--- ************************************************************* --->	       <cfset var tTimeFormat=javacast("int",arguments.thisTimeFormat)>	       <cfset var tTimeFormatter=instance.aDateFormat.getTimeInstance(tTimeFormat,instance.thisLocale)>	       <cfset var tTZ=instance.timeZone.getTimezone(arguments.tz)>	       <cfset tTimeFormatter.setTimezone(tTZ)>	       <cfreturn tTimeFormatter.format(arguments.thisOffset)>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="dateLocaleFormat" access="public" returnType="any" output="false"				hint="locale version of dateFormat. Needs object instantiation. That is your job not mine.">		<!--- ************************************************************* --->		<cfargument name="date" type="date" required="true">		<cfargument name="style" type="string" required="false" default="LONG" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<!--- ************************************************************* --->		<cfscript>		// hack to trap & fix varchar mystery goop coming out of mysql datetimes		try {			return instance.aDateFormat.getDateInstance(instance.aDateFormat[arguments.style],instance.thisLocale).format(arguments.date);		}		catch(Any e) {			instance.aCalendar.setTime(arguments.date);			return instance.aDateFormat.getDateInstance(instance.aDateFormat[arguments.style],instance.thisLocale).format(instance.aCalendar.getTime());		}		</cfscript>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="timeLocaleFormat" access="public" returnType="any" output="false"				hint="locale version of timeFormat. Needs object instantiation. That is your job not mine.">		<!--- ************************************************************* --->		<cfargument name="date"  type="date" 	required="true">		<cfargument name="style" type="string"  required="false" default="SHORT" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<!--- ************************************************************* --->		<cfscript>		// hack to trap & fix varchar mystery goop coming out of mysql datetimes		try {			return instance.aDateFormat.getTimeInstance(instance.aDateFormat[arguments.style],instance.thisLocale).format(arguments.date);		}		catch (Any e) {			instance.aCalendar.setTime(arguments.date);			return instance.aDateFormat.getTimeInstance(instance.aDateFormat[arguments.style],instance.thisLocale).format(instance.aCalendar.getTime());		}		</cfscript>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="datetimeLocaleFormat" access="public" returnType="any" output="false"				hint="locale date/time format. Needs object instantiation. That is your job not mine.">		<!--- ************************************************************* --->		<cfargument name="date" 		type="date" required="true">		<cfargument name="dateStyle" 	type="string" required="false" default="SHORT" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<cfargument name="timeStyle" 	type="string" required="false" default="SHORT" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<!--- ************************************************************* --->		<cfscript>		// hack to trap & fix varchar mystery goop coming out of mysql datetimes		try {			return instance.aDateFormat.getDateTimeInstance(instance.aDateFormat[arguments.dateStyle],instance.aDateFormat[arguments.timeStyle],instance.thisLocale).format(arguments.date);		}		catch (Any e) {			variables.aCalendar.setTime(arguments.date);			return instance.aDateFormat.getDateTimeInstance(instance.aDateFormat[arguments.dateStyle],instance.aDateFormat[arguments.timeStyle],instance.thisLocale).format(instance.aCalendar.getTime());		}		</cfscript>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="i18nDateParse" access="public" output="No" returntype="numeric" hint="parses localized date string to datetime object or returns blank if it can't parse">		<!--- ************************************************************* --->		<cfargument name="thisDate" required="yes" type="string">		<!--- ************************************************************* --->			<cfset var isOk=false>			<cfset var i=0>			<cfset var parsedDate="">			<cfset var tDateFormatter="">			<!--- holy cow batman, can't parse dates in an elegant way. bash! pow! socko! --->			<cfloop index="i" from="0" to="3">				<cfset isOK=true>				<cfset tDateFormatter=instance.aDateFormat.getDateInstance(javacast("int",i),instance.thisLocale)>				<cftry>					<cfset parsedDate=tDateFormatter.parse(arguments.thisDate)>					<cfcatch type="Any">						<cfset isOK=false>					</cfcatch>				</cftry>				<cfif isOK>					<cfbreak>				</cfif>	        </cfloop>	        <cfreturn parsedDate.getTime()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="i18nDateTimeParse" access="public" output="No" returntype="numeric" hint="parses localized datetime string to datetime object or returns blank if it can't parse">		<!--- ************************************************************* --->		<cfargument name="thisDate" required="yes" type="string">		<!--- ************************************************************* --->			<cfset var isOk=false>			<cfset var i=0>			<cfset var j=0>			<cfset var dStyle=0>			<cfset var tStyle=0>			<cfset var parsedDate="">			<cfset var tDateFormatter="">			<!--- holy cow batman, can't parse dates in an elegant way. bash! pow! socko! --->			<cfloop index="i" from="0" to="3">				<cfset dStyle=javacast("int",i)>				<cfloop index="j" from="0" to="3">					<cfset tStyle=javacast("int",j)>					<cfset isOK=true>					<cfset tDateFormatter=instance.aDateFormat.getDateTimeInstance(dStyle,tStyle,instance.thisLocale)>					<cftry>						<cfset parsedDate=tDateFormatter.parse(arguments.thisDate)>						<cfcatch type="Any">							<cfset isOK=false>						</cfcatch>					</cftry>					<cfif isOK>						<cfbreak>					</cfif>				</cfloop>	       </cfloop>	       <cfreturn parsedDate.getTime()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getDateTimePattern" access="public" output="No" returntype="string" hint="returns locale date/time pattern">		<!--- ************************************************************* --->		<cfargument name="thisDateFormat" required="no" type="numeric" default="1" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<cfargument name="thisTimeFormat" required="no" type="numeric" default="3" hint="FULL=0, LONG=1, MEDIUM=2, SHORT=3">		<!--- ************************************************************* --->	       <cfset var tDateFormat=javacast("int",arguments.thisDateFormat)>	       <cfset var tTimeFormat=javacast("int",arguments.thisTimeFormat)>	       <cfset var tDateFormatter=instance.aDateFormat.getDateTimeInstance(tDateFormat,tTimeFormat,instance.thisLocale)>	       <cfreturn tDateFormatter.toPattern()>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="formatDateTime" access="public" output="No" returntype="string" hint="formats a date/time to given pattern">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="yes" type="numeric">		<cfargument name="thisPattern" required="yes" type="string">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var tDateFormatter=instance.aDateFormat.getDateTimeInstance(instance.aDateFormat.LONG,instance.aDateFormat.LONG,instance.thisLocale)>	       <cfset tDateFormatter.applyPattern(arguments.thisPattern)>	       <cfreturn tDateFormatter.format(arguments.thisOffset)>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="weekStarts" access="public" returnType="string" output="false" hint="Determines the first DOW.">	       <cfreturn instance.aCalendar.getFirstDayOfWeek() />	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getLocalizedYear" access="public" returnType="string" output="false" hint="Returns localized year, probably only useful for BE calendars like in thailand, etc.">		<!--- ************************************************************* --->		<cfargument name="thisYear"   type="numeric" required="true" />		<!--- ************************************************************* --->	       <cfset var thisDF=instance.aDateFormat.init("yyyy", buildLocale(instance.thisLocale))>	       <cfreturn thisDF.format(createDate(arguments.thisYear, 1, 1)) />	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getLocalizedMonth" access="public" returnType="string" output="false" hint="Returns localized month.">		<!--- ************************************************************* --->		<cfargument name="month" type="numeric" required="true">	    <!--- ************************************************************* --->	       <cfset var thisDF=instance.aDateFormat.init("MMMM",buildLocale(instance.thisLocale))>	       <cfreturn thisDF.format(createDate(1999,arguments.month,1))>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getLocalizedDays" access="public" returnType="any" output="false"				hint="Facade to getShortWeedDays. For compatability">		<cfscript>		return getShortWeekDays();		</cfscript>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getShortWeekDays" access="public" output="No" returntype="array" hint="returns short day names for this calendar">		<!--- ************************************************************* --->		<cfargument name="calendarOrder" required="no" type="boolean" default="true">		<!--- ************************************************************* --->	       <cfset var theseDateSymbols= createObject("java","java.text.DateFormatSymbols").init(instance.thisLocale)>	       <cfset var localeDays="">	       <cfset var i=0>	       <cfset var tmp=listToArray(arrayToList(theseDateSymbols.getShortWeekDays()))>	       <cfif NOT arguments.calendarOrder>	               <cfreturn tmp>	       <cfelse>	               <cfswitch expression="#weekStarts(instance.thisLocale)#">		               <cfcase value="1"> <!--- "standard" dates --->		                       <cfreturn tmp>		               </cfcase>		               <cfcase value="2"> <!--- euro dates, starts on monday needs kludge --->		                       <cfset localeDays=arrayNew(1)>		                       <cfset localeDays[7]=tmp[1]>; <!--- move sunday to last --->		                       <cfloop index="i" from="1" to="6">		                               <cfset localeDays[i]=tmp[i+1]>		                       </cfloop>		                       <cfreturn localeDays>		               </cfcase>		               <cfcase value="7"> <!--- starts saturday, usually arabic, needs kludge --->		                       <cfset localeDays=arrayNew(1)>		                       <cfset localeDays[1]=tmp[7]> <!--- move saturday to first --->		                       <cfloop index="i" from="1" to="6">		                               <cfset localeDays[i+1]=tmp[i]>		                       </cfloop>		                       <cfreturn localeDays>		               </cfcase>	               </cfswitch>	       </cfif>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getYear" output="No" access="public" returntype="numeric" hint="returns year from epoch offset">		<!--- ************************************************************* --->		<cfargument name="thisOffset"   required="Yes" hint="java epoch offset" type="numeric">		<cfargument name="tz" 			required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var thisTZ=instance.timeZone.getTimeZone(arguments.tZ)>	       <cfset instance.aCalendar.setTimeInMillis(arguments.thisOffset)>	       <cfset instance.aCalendar.setTimeZone(thisTZ)>	       <cfreturn instance.aCalendar.get(instance.aCalendar.YEAR)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getMonth" output="No" access="public" returntype="numeric" hint="returns month from epoch offset">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="Yes" hint="java epoch offset" type="numeric">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var thisTZ=instance.timeZone.getTimeZone(arguments.tZ)>	       <cfset instance.aCalendar.setTimeInMillis(arguments.thisOffset)>	       <cfset instance.aCalendar.setTimeZone(thisTZ)>	       <cfreturn instance.aCalendar.get(instance.aCalendar.MONTH)+1> <!--- java months start at 0 --->	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getDay" output="No" access="public" returntype="numeric" hint="returns day from epoch offset">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="Yes" hint="java epoch offset" type="numeric">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var thisTZ=instance.timeZone.getTimeZone(arguments.tZ)>	       <cfset instance.aCalendar.setTimeInMillis(arguments.thisOffset)>	       <cfset instance.aCalendar.setTimeZone(thisTZ)>	       <cfreturn instance.aCalendar.get(instance.aCalendar.DATE)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getHour" output="No" access="public" returntype="numeric" hint="returns hour of day, 24 hr format, from epoch offset">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="Yes" hint="java epoch offset" type="numeric">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var thisTZ=instance.timeZone.getTimeZone(arguments.tZ)>	       <cfset instance.aCalendar.setTimeInMillis(arguments.thisOffset)>	       <cfset instance.aCalendar.setTimeZone(thisTZ)>	       <cfreturn instance.aCalendar.get(instance.aCalendar.HOUR_OF_DAY)>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getMinute" output="No" access="public" returntype="numeric" hint="returns minute from epoch offset">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="Yes" hint="java epoch offset" type="numeric">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var thisTZ=instance.timeZone.getTimeZone(arguments.tZ)>	       <cfset instance.aCalendar.setTimeInMillis(arguments.thisOffset)>	       <cfset instance.aCalendar.setTimeZone(thisTZ)>	       <cfreturn instance.aCalendar.get(instance.aCalendar.MINUTE)>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getSecond" output="No" access="public" returntype="numeric" hint="returns second from epoch offset">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="Yes" hint="java epoch offset" type="numeric">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var thisTZ=instance.timeZone.getTimeZone(arguments.tZ)>	       <cfset instance.aCalendar.setTimeInMillis(arguments.thisOffset)>	       <cfset instance.aCalendar.setTimeZone(thisTZ)>	       <cfreturn instance.aCalendar.get(instance.aCalendar.SECOND)>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="toEpoch" access="public" output="no" returnType="numeric" hint="converts datetime to java epoch offset">		<cfargument name="thisDate" required="Yes" hint="datetime to convert to java epoch" type="date">	       <cfreturn arguments.thisDate.getTime()>	 </cffunction> 	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="fromEpoch" access="public" output="no" returnType="date" hint="converts java epoch offset to datetime">		<cfargument name="thisOffset" required="Yes" hint="java epoch offset to convert to datetime" type="numeric">	       <cfset instance.aCalendar.setTimeInMillis(arguments.thisOffset)>	       <cfreturn instance.aCalendar.getTime()>	 </cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getAvailableTZ" output="yes" returntype="array" access="public" hint="returns an array of timezones available on this server">		<cfreturn instance.timeZone.getAvailableIDs()>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="usesDST" output="No" returntype="boolean" access="public" hint="determines if a given timezone uses DST">		<cfargument name="tz" required="no" default="#instance.timeZone.getDefault().getID()#">	       <cfreturn instance.timeZone.getTimeZone(arguments.tz).useDaylightTime()>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getRawOffset" output="No" access="public" returntype="numeric" hint="returns rawoffset in hours">		<cfargument name="tZ" required="no" default="#instance.timeZone.getDefault().getID()#">               <cfset var thisTZ=instance.timeZone.getTimeZone(arguments.tZ)>               <cfreturn thisTZ.getRawOffset()/3600000>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getDST" output="No" access="public" returntype="numeric" hint="returns DST savings in hours">		<cfargument name="thisTZ" required="no" default="#instance.timeZone.getDefault().getID()#">	       <cfset var tZ=instance.timeZone.getTimeZone(arguments.thisTZ)>	       <cfreturn tZ.getDSTSavings()/3600000>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getTZByOffset" output="No" returntype="array" access="public" hint="returns a list of timezones available on this server for a given raw offset">		<cfargument name="thisOffset" required="Yes" type="numeric">	       <cfset var rawOffset=javacast("long",arguments.thisOffset * 3600000)>	       <cfreturn instance.timeZone.getAvailableIDs(rawOffset)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getServerTZ" output="No" access="public" returntype="any" hint="returns server TZ">	       <cfset var serverTZ=instance.timeZone.getDefault()>	       <cfreturn serverTZ.getDisplayName(true,instance.timeZone.LONG)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="inDST" output="No" returntype="boolean" access="public" hint="determines if a given date in a given timezone is in DST">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="yes" type="numeric">		<cfargument name="tzToTest" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var thisTZ=instance.timeZone.getTimeZone(arguments.tzToTest)>	       <cfset instance.aCalendar.setTimeInMillis(arguments.thisOffset)>	       <cfset instance.aCalendar.setTimezone(thisTZ)>	       <cfreturn thisTZ.inDaylightTime(instance.aCalendar.getTime())>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="getTZOffset" output="No" access="public" hint="returns offset in hours">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="yes" type="numeric">		<cfargument name="thisTZ" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfset var tZ=instance.timeZone.getTimeZone(arguments.thisTZ)>	       <cfreturn tZ.getOffset(arguments.thisOffset)/3600000> <!--- return hours --->	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<cffunction name="i18nDateAdd" access="public" output="No" returntype="numeric">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="yes" type="numeric">		<cfargument name="thisDatePart" required="yes" type="string">		<cfargument name="dateUnits" required="yes" type="numeric">		<cfargument name="thisTZ" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->	       <cfscript>	               var dPart="";	               var tZ=instance.timeZone.getTimeZone(arguments.thisTZ);	               switch (arguments.thisDatepart) {	                       case "y" :	                       case "yr" :	                       case "yyyy" :	                       case "year" :	                               dPart=instance.aCalendar.YEAR;	                       break;	                       case "m" :	                       case "month" :	                               dPart=instance.aCalendar.MONTH;	                       break;	                       case "w" :	                       case "week" :	                               dPart=instance.aCalendar.WEEK_OF_MONTH;	                       break;	                       case "d" :	                       case "day" :	                               dPart=instance.aCalendar.DATE;	                       break;	                       case "h" :	                       case "hr":	                       case "hour" :	                               dPart=instance.aCalendar.HOUR;	                       break;	                       case "n" :	                       case "minute" :	                               dPart=instance.aCalendar.MINUTE;	                       break;	                       case "s" :	                       case "second" :	                               dPart=instance.aCalendar.SECOND;	                       break;	               }	               instance.aCalendar.setTimeInMillis(arguments.thisOffset);	               instance.aCalendar.setTimezone(tZ);	               instance.aCalendar.add(dPart,javacast("int",arguments.dateUnits));	               return instance.aCalendar.getTimeInMillis();	       </cfscript>	</cffunction>	<!--- ************************************************************* --->		<!--- ************************************************************* --->	<!--- oh my is this nasty in core java --->	<cffunction name="i18nDateDiff"  access="public" output="No" returntype="numeric">		<!--- ************************************************************* --->		<cfargument name="thisOffset" required="yes" type="numeric">		<cfargument name="thatOffset" required="yes" type="numeric">		<cfargument name="thisDatePart" required="yes" type="string">		<cfargument name="thisTZ" required="no" default="#instance.timeZone.getDefault().getID()#">		<!--- ************************************************************* --->		<cfscript>		       var dPart="";		       var elapsed=0;		       var before=createObject("java","java.util.GregorianCalendar");		       var after=createObject("java","java.util.GregorianCalendar");		       var tZ=instance.timeZone.getTimeZone(arguments.thisTZ);		       var e=0;		       var s=0;		       var direction=1;		       // lets shortcut first		       if (arguments.thisOffset EQ arguments.thatOffset)		               return 0;		       else {  // setup calendars to test		               if (arguments.thisOffset LT arguments.thatOffset) {		                       before.setTimeInMillis(arguments.thisOffset);		                       after.setTimeInMillis(arguments.thatOffset);		                       before.setTimezone(tZ);		                       after.setTimezone(tZ);		               } else {		                       before.setTimeInMillis(arguments.thatOffset);		                       after.setTimeInMillis(arguments.thisOffset);		                       before.setTimezone(tZ);		                       after.setTimezone(tZ);		                       direction=-1;		               } // which offset came first		               switch (arguments.thisDatepart) {		                       case "y" :		                       case "yr" :		                       case "yyyy" :		                       case "year" :		                               dPart=instance.aCalendar.YEAR;		                               before.clear(instance.aCalendar.DATE);		                               after.clear(instance.aCalendar.DATE);		                               before.clear(instance.aCalendar.MONTH);		                               after.clear(instance.aCalendar.MONTH);		                       break;		                       case "m" :		                       case "month" :		                               dPart=instance.aCalendar.MONTH;		                               before.clear(instance.aCalendar.DATE);		                               after.clear(instance.aCalendar.DATE);		                       break;		                       case "w" :		                       case "week" :		                               dPart=instance.aCalendar.WEEK_OF_YEAR;		                               before.clear(instance.aCalendar.DATE);		                               after.clear(instance.aCalendar.DATE);		                       break;		                       case "d" :		                       case "day" :		                               // very much a special case		                               e=after.getTimeInMillis()+after.getTimeZone().getOffset(after.getTimeInMillis());		                               s=before.getTimeInMillis()+before.getTimeZone().getOffset(before.getTimeInMillis());		                               return int((e-s)/86400000)*direction;		                       break;		                       case "h" :		                       case "hr" :		                       case "hour" :		                               e=after.getTimeInMillis()+after.getTimeZone().getOffset(after.getTimeInMillis());		                               s=before.getTimeInMillis()+before.getTimeZone().getOffset(before.getTimeInMillis());		                               return int((e-s)/3600000)*direction;		                       break;		                       case "n" :		                       case "minute" :		                               e=after.getTimeInMillis()+after.getTimeZone().getOffset(after.getTimeInMillis());		                               s=before.getTimeInMillis()+before.getTimeZone().getOffset(before.getTimeInMillis());		                               return int((e-s)/60000)*direction;		                       break;		                       case "s" :		                       case "second" :		                               e=after.getTimeInMillis()+after.getTimeZone().getOffset(after.getTimeInMillis());		                               s=before.getTimeInMillis()+before.getTimeZone().getOffset(before.getTimeInMillis());		                               return int((e-s)/1000)*direction;		                       break;		               }// datepart switch		               while (before.before(after)){		                       before.add(dPart,1);		                       elapsed=elapsed+1;		               } //count dateparts		               return elapsed * direction;		       } // if start & end times are the same		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getVersion" access="public" output="false" returntype="struct" hint=" returns version of this CFC and icu4j library it uses.">		<cfset var version=StructNew()>		<cfset var sys=createObject("java","java.lang.System")>		<cfset version.I18NUtilVersion=instance.pluginVersion>		<cfset version.I18NUtilDate=instance.I18NUtilDate>		<cfset version.javaRuntimeVersion=sys.getProperty("java.runtime.version")>		<cfset version.javaVersion=sys.getProperty("java.version")>		<cfreturn version>	</cffunction>	<!--- ************************************************************* ---><!------------------------------------------- PRIVATE ------------------------------------------->	<!--- ************************************************************* --->	<cffunction name="buildLocale"  access="private" output="false"hint="creates valid core java locale from java style locale ID">		<!--- ************************************************************* --->		<cfargument name="thisLocale" required="yes" type="string">		<!--- ************************************************************* --->		<cfscript>		       var l=listFirst(arguments.thisLocale,"_");		       var c="";		       var v="";		       var tLocale=instance.aLocale.getDefault(); // if we fail fallback on server default		       switch (listLen(arguments.thisLocale,"_")) {	               case 1:	                       tLocale=instance.aLocale.init(l);	               break;	               case 2:	                       c=listLast(arguments.thisLocale,"_");	                       tLocale=instance.aLocale.init(l,c);	               break;	               case 3:	                       c=listGetAt(arguments.thisLocale,2,"_");	                       v=listLast(arguments.thisLocale,"_");	                       tLocale=instance.aLocale.init(l,c,v);	               break;		       }		       return tLocale;		</cfscript>	</cffunction>	<!--- ************************************************************* --->		</cfcomponent>