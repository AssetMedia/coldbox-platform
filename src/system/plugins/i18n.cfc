<!-----------------------------------------------------------------------Author: Paul Hastings, Raymond Camden, Luis MajanoDate: June 20, 2006Purpose	:	Locale utils. Lots of help from Paul Hastings. Basically, since CF's locale funcs			don't accept Java locales, I wrote these functions instead.			Most of these methods operate on the current locale.			To Do - handle converting from UTC to local time, modded by user pref TZDescription:This is a resource bundles plugin which uses the standard Java locale names.The storage mechanism is via the application scope:application.ColdBox_ConfigStruct.RBundles["#arguments.rbLocale#"]It makes use of the application scope and Paul Hastings cfc.http://www.sustainablegis.com/unicode/resourceBundle/rb.cfmFor ISO Language Code information look at:http://www.ics.uci.edu/pub/ietf/http/related/iso639.txtFor ISO Country Code information look at:http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.htmlFor local information look athttp://java.sun.com/j2se/1.4.2/docs/guide/intl/locale.doc.htmlModifications:Updated for ColdBox.-----------------------------------------------------------------------><cfcomponent name="i18n"			 hint="This is the i18N plugin based on Paul Hastings cfc. It uses standard Java locale names and has its own storage mechanism via RBundles['Locale'].  This plugin can have several uses beacuse it contains several i18N utility methods. If you do not use any of these formatting methods, then you basically do not call this plugin unless you want to change locales.  If not you can get the plugin and place it in scope (application,session) from where you can use the methods throughout your application."			 extends="plugin"><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cfset variables.thisLocale = ""><!------------------------------------------- PUBLIC ------------------------------------------->	<!--- ************************************************************* --->	<cffunction name="init" access="public" returntype="any" hint="Constructor" output="false">		<cfargument name="controller" required="yes" hint="The reference to the framework controller">		<cfset super.Init(arguments.controller) />		<cfreturn this>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="initBundle" access="public" output="No" hint="Reads,parses and saves the resource bundle per locale in internal ColdBox structures." returntype="void">		<!--- ************************************************************* --->		<cfargument name="rbFile"   required="Yes" type="string" hint="This must be the path + filename UP to but NOT including the locale. We auto-add .properties to the end.">		<cfargument name="rbLocale" required="No"  type="string" default="en_US">		<!--- ************************************************************* --->		<!--- Load the default Bundle --->		<cfset loadBundle(arguments.rbFile, arguments.rbLocale)>		<!--- Set the default Locale --->		<cfset setfwLocale(arguments.rbLocale,true)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="loadBundle" access="public" output="No" hint="Reads,parses and saves the resource bundle per locale in internal ColdBox structures." returntype="void">		<!--- ************************************************************* --->		<cfargument name="rbFile"   required="Yes" type="string" hint="This must be the path + filename UP to but NOT including the locale. We auto-add .properties to the end.">		<cfargument name="rbLocale" required="No"  type="string" default="en_US">		<!--- ************************************************************* --->		<cfset var resourceBundle=structNew()>		<cfset var fallbackLocale="en_US"> <!--- might change to reflect your locale --->		<cfset var resourceBundleFile = "">		<cfset var rbIndx = "">		<!--- Translate rbFile --->		<cfset arguments.rbFile = arguments.rbFile & "_#arguments.rbLocale#.properties">		<cfif NOT fileExists(arguments.rbFile)>			<cfthrow type="Framework.i18N.FileNotFoundException" message="Fatal error: resource bundle #arguments.rbFile# not found.">		</cfif>		<!--- Read RB File Contents --->		<cffile action="read" file="#arguments.rbFile#" variable="resourceBundleFile" charset="utf-8">		<!--- Create Key Structure --->		<cfloop index="rbIndx" list="#resourceBundleFile#" delimiters="#chr(10)#">			<cfif len(trim(rbIndx)) and left(rbIndx,1) NEQ "##">				<cfset resourceBundle[trim(listFirst(rbIndx,"="))] = trim(listRest(rbIndx,"="))>			</cfif>		</cfloop>		<!--- Place resource bundle in ColdBox's Storage --->		<cfset setSetting("RBundles.#arguments.rbLocale#",resourceBundle)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getResource" access="public" output="false" returnType="any" hint="Returns bundle.X, if it exists, according to locale">		<!--- ************************************************************* --->		<cfargument name="resource" type="string" required="true" hint="The resource to retrieve from the bundle.">		<!--- ************************************************************* --->		<cfset var val = "">		<cfset var Bundle = "">		<!--- Check For Bundle --->		<cfif not structKeyExists(getSetting("RBundles"),getfwLocale())>			<cfthrow type="Framework.i18N.BundleNotLoadedException" message="Fatal error: resource bundle for locale: #getfwLocale()# has not been loaded.">		</cfif>		<cfset Bundle = getSetting("RBundles.#getfwLocale()#")>		<!--- Check for Key --->		<cfif not structKeyExists(Bundle, arguments.resource)>			<cfset val = "_UNKNOWNTRANSLATION_">		<cfelse>			<cfset val = Bundle[arguments.resource]>		</cfif>		<cfreturn val>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="setfwLocale" access="public" output="false" returnType="void" hint="Set the default locale to use.">		<!--- ************************************************************* --->		<cfargument name="locale"     type="string" required="true"   hint="The locale to retrieve the key from.">		<cfargument name="onLoadFlag" type="boolean" required="false" default="false" hint="Flag to skip bundle loading check, locale already set.">		<!--- ************************************************************* --->		<!--- Setup fw Locale --->		<cfif not arguments.onLoadFlag and not structKeyExists(getSetting("RBundles"),arguments.locale)>			<cfset loadBundle(getSetting("DefaultResourceBundle"),arguments.locale)>		</cfif>		<cfif getSetting("LocaleStorage") eq "session">			<cfset session.DefaultLocale = arguments.locale>		<cfelse>			<cfset client.DefaultLocale = arguments.locale>		</cfif>		<!--- The following are to setup the cfc for instantiation usage. Only used if this plugin is placed on a sccope --->		<cfif not listLen(arguments.locale,"_") is 2 or			  not len(listFirst(arguments.locale,"_")) is 2 or			  not len(listLast(arguments.locale,"_")) is 2>			<cfthrow type="Framework.i18N.InvalidLocalSyntaxException" message="Specified locale must be of the form language_country where language and country are 2 characters each, en_US, fr_FR, etc.">		</cfif>		<cfset variables.lang = listFirst(arguments.locale,"_")>		<cfset variables.country = listLast(arguments.locale,"_")>		<cfset variables.BIDIlanguages="ar,he,fa,ps"><!--- couple more BIDI writing systems --->		<cfset variables.thisLocale=createObject("java","java.util.Locale").init(variables.lang, variables.country)>		<cfset variables.localeName=variables.thisLocale.getDisplayName(variables.thisLocale)>		<cfset variables.aDateFormat=createObject("java","java.text.DateFormat")>		<cfset variables.sDateFormat=createObject("java","java.text.SimpleDateFormat")>		<cfset variables.aCalendar=createObject("java","java.util.GregorianCalendar").init(variables.thisLocale)>		<cfset variables.dateSymbols=createObject("java","java.text.DateFormatSymbols").init(variables.thisLocale)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getAvailableLocales" access="public" returnType="any" output="false"				hint="Returns an array of locales.">		<cfscript>		var i=0;		var orgLocales=createObject("java","java.util.Locale").getAvailableLocales();		var theseLocales=arrayNew(1);		// we skip plain languages, en, fr, ar, etc.		for (i=1; i LTE arrayLen(orgLocales); i=i+1) {			if (listLen(orgLocales[i],"_") GT 1) {			arrayAppend(theseLocales,orgLocales[i]);			} // if		} //for		return theseLocales;		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getfwLocale" access="public" output="false" returnType="any" hint="Get the default locale.">		<cfswitch expression="#getSetting("LocaleStorage")#">			<cfcase value="session" >				<cfif not structKeyExists(session,"DefaultLocale")>					<cfset setfwLocale(getSetting("DefaultLocale"))>				</cfif>				<cfreturn session.DefaultLocale>			</cfcase>			<cfcase value="client">				<cfif not structKeyExists(client,"DefaultLocale")>					<cfset setfwLocale(getSetting("DefaultLocale"))>				</cfif>				<cfreturn client.DefaultLocale>			</cfcase>			<cfdefaultcase>				<cfthrow type="Framework.i18N.DefaultSettingsInvalidException" message="The default settings in your config are blank. Please make sure you create the i18n elements.">			</cfdefaultcase>		</cfswitch>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="instanceCheck" access="public" returnType="void" output="false" hint="Check if the plugin is called as instance or method.">		<cfif variables.thisLocale eq "">			<cfthrow type="Framework.i18N.NoInstanceException" message="This method was called directly. This method only works if you have placed this plugin in a scope.">		</cfif>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="isBIDI" access="public" returnType="any" output="false" hint="Needs object instantiation. That is your job not mine.">		<cfset instanceCheck()>		<cfreturn listFind(variables.BIDILanguages,variables.lang)>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="dateLocaleFormat" access="public" returnType="any" output="false"				hint="locale version of dateFormat. Needs object instantiation. That is your job not mine.">		<!--- ************************************************************* --->		<cfargument name="date" type="date" required="true">		<cfargument name="style" type="string" required="false" default="LONG">		<!--- ************************************************************* --->		<cfscript>		//Instance Check		instanceCheck();		// hack to trap & fix varchar mystery goop coming out of mysql datetimes		try {			return variables.aDateFormat.getDateInstance(variables.aDateFormat[arguments.style],variables.thisLocale).format(arguments.date);		}		catch(Any e) {			variables.aCalendar.setTime(arguments.date);			return variables.aDateFormat.getDateInstance(variables.aDateFormat[arguments.style],variables.thisLocale).format(variables.aCalendar.getTime());		}		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getLocalizedDays" access="public" returnType="any" output="false"				hint="Returns localized days. Needs object instantiation. That is your job not mine.">		<cfscript>		var localizedShortDays="";		var i=0;		var tmp="";		//Instance Check		instanceCheck();		tmp = variables.dateSymbols.getShortWeekdays();		// kludge java returns NULL first element in array so can't use arrayDeleteAt		tmp=listToArray(arrayToList(tmp));		// more kludge, fixup days to match week start		switch (weekStarts()) {			case 1:  //starts on sunday, just return day names				localizedShortDays=tmp;			break;			case 2: // euro dates, starts on monday needs kludge				localizedShortDays=arrayNew(1);				localizedShortDays[7]=tmp[1]; //move sunday to last				for (i=1; i LTE 6; i=i+1) {					localizedShortDays[i]=tmp[i+1];				}			break;			case 7: // starts saturday, usually arabic, needs kludge				localizedShortDays=arrayNew(1);				localizedShortDays[1]=tmp[7]; //move saturday to first				for (i=1; i LTE 6; i=i+1) {					localizedShortDays[i+1]=tmp[i];				}			break;		}		return localizedShortDays;		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getLocalizedMonth" access="public" returnType="any" output="false"				hint="Returns localized month.  Needs object instantiation. That is your job not mine.">		<!--- ************************************************************* --->		<cfargument name="month" type="numeric" required="true">		<!--- ************************************************************* --->		<cfscript>		instanceCheck();		variables.sDateFormat.init("MMMM",variables.thisLocale);		return variables.sDateFormat.format(createDate(1999,arguments.month,1));		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getLocalizedYear" access="public" returnType="any" output="false"				hint="Returns localized year, probably only useful for BE calendars like in thailand, etc. Needs object instantiation. That is your job not mine.">		<!--- ************************************************************* --->		<cfargument name="thisYear" type="numeric" required="true">		<!--- ************************************************************* --->		<cfscript>		instanceCheck();		variables.sDateFormat.init("yyyy",variables.thisLocale);		return variables.sDateFormat.init("yyyy",variables.thisLocale).format(createDate(arguments.thisYear,1,1));		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="timeLocaleFormat" access="public" returnType="any" output="false"				hint="locale version of timeFormat. Needs object instantiation. That is your job not mine.">		<!--- ************************************************************* --->		<cfargument name="date"  type="date" required="true">		<cfargument name="style" type="string" required="false" default="SHORT">		<!--- ************************************************************* --->		<cfscript>		instanceCheck();		// hack to trap & fix varchar mystery goop coming out of mysql datetimes		try {			return variables.aDateFormat.getTimeInstance(variables.aDateFormat[arguments.style],variables.thisLocale).format(arguments.date);		}		catch (Any e) {			variables.aCalendar.setTime(arguments.date);			return variables.aDateFormat.getTimeInstance(variables.aDateFormat[arguments.style],variables.thisLocale).format(variables.aCalendar.getTime());		}		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="datetimeLocaleFormat" access="public" returnType="any" output="false"				hint="locale date/time format. Needs object instantiation. That is your job not mine.">		<!--- ************************************************************* --->		<cfargument name="date" 		type="date" required="true">		<cfargument name="dateStyle" 	type="string" required="false" default="SHORT">		<cfargument name="timeStyle" 	type="string" required="false" default="SHORT">		<!--- ************************************************************* --->		<cfscript>		instanceCheck();		// hack to trap & fix varchar mystery goop coming out of mysql datetimes		try {			return variables.aDateFormat.getDateTimeInstance(variables.aDateFormat[arguments.dateStyle],variables.aDateFormat[arguments.timeStyle],variables.thisLocale).format(arguments.date);		}		catch (Any e) {			variables.aCalendar.setTime(arguments.date);			return variables.aDateFormat.getDateTimeInstance(variables.aDateFormat[arguments.dateStyle],variables.aDateFormat[arguments.timeStyle],variables.thisLocale).format(variables.aCalendar.getTime());		}		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="weekStarts" access="public" returnType="any" output="false"				hint="Determines the first DOW. Needs object instantiation. That is your job not mine.">		<cfscript>		instanceCheck();		return variables.aCalendar.getFirstDayOfWeek();		</cfscript>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getLocalizedName" access="public" returnType="any" output="false"				hint="Returns current locale name. Needs object instantiation. That is your job not mine.">		<cfreturn variables.localeName>	</cffunction>	<!--- ************************************************************* --->	<!--- ************************************************************* --->	<cffunction name="getCurrentLocale" access="public" returnType="any" output="false"				hint="Returns current locale, Needs object instantiation. That is your job not mine.">		<cfreturn variables.thisLocale>	</cffunction>	<!--- ************************************************************* ---></cfcomponent>