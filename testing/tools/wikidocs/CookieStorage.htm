
[[Dashboard | << Back to Dashboard ]]

{| align="right"
| __TOC__
|}

= Exploring the AntiSamy Plugin =


== Overview ==
OWASP AntiSamy Project that provides XSS cleanup operations to ColdBox applications


== HtmlSanitizer ==
clean HTML from XSS scripts using the AntiSamy project. The available policies are antisamy, ebay,myspace or slashdot

=== Returns ===
* This function returns ''Any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| HtmlData || string || Yes || --- || The html text to sanitize
|-
| PolicyFile || string || No || myspace || Provide policy file to scan html. Available options are: antisamy, ebay, myspace, slashdot
|}

=== Examples ===

[[Dashboard | << Back to Dashboard ]]

{| align="right"
| __TOC__
|}

= Exploring the ApplicationStorage Plugin =


== Overview ==
Application Storage plugin. It provides the user with a mechanism for permanent data storage using the application scope.


== setVar ==
Set a new permanent variable.

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The name of the variable.
|-
| value || any || Yes || --- || The value to set in the variable.
|}

=== Examples ===

== getVar ==
Get a new permanent variable. If the variable does not exist. The method returns blank unless using the default return argument.

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|-
| default || any || No ||  || The default value to set. If not used, a blank is returned.
|}

=== Examples ===

== removeStorage ==
remove the entire storage from scope

=== Returns ===
* This function returns ''void''


=== Examples ===

== exists ==
Checks wether the permanent variable exists.

=== Returns ===
* This function returns ''boolean''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|}

=== Examples ===

== clearAll ==
Clear the entire coldbox application storage

=== Returns ===
* This function returns ''void''


=== Examples ===

== deleteVar ==
Tries to delete a permanent application variable. Returns True if deleted.

=== Returns ===
* This function returns ''boolean''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|}

=== Examples ===

== getStorage ==
Get the entire storage scope structure

=== Returns ===
* This function returns ''struct''


=== Examples ===

[[Dashboard | << Back to Dashboard ]]

{| align="right"
| __TOC__
|}

= Exploring the CFCViewer Plugin =


== Overview ==
This components provides functionality to obtain information about cfcs via introspection.


== setRenderingTemplate ==
Set the rendering template to use

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| RenderingTemplate || string || Yes || --- || 
|}

=== Examples ===

== renderit ==
Render the content

=== Returns ===
* This function returns ''any''


=== Examples ===

== getlinkType ==
Get linkType

=== Returns ===
* This function returns ''string''


=== Examples ===

== getDirpath ==
Get the dirpath of where the cfc's reside. This is expanded.

=== Returns ===
* This function returns ''string''


=== Examples ===

== getaCFC ==
returns an array with the names of all components within the current directory

=== Returns ===
* This function returns ''array''


=== Examples ===

== setup ==
Use this method to initialize for documentation. You must persist it in your request so you can do renderings and interact with the object.

=== Returns ===
* This function returns ''CFCViewer''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| dirpath || string || Yes || --- || The directory path to which is the root of what you want the cfcviewer to report on. This must be a valid instantiation path: ex: /coldbox/system
|-
| accessTypesFilter || string || No ||  || Use this argument to only display methods with the access types given. If empty, displays all methods (public, private, remote, package).
|-
| dirLink || string || No || --- || If you pass this. it will create a linkable directory or package structure according to the link provided and append an internal package variable.
|-
| jsLink || string || No || --- || If you pass this, it will create a linkable package according to the js provided. Also, place a @package@ on your link, so it can correctly identify where to place the url parameter for the package choosen
|-
| RenderingTemplate || string || No || --- || Override the rendering template with yours
|-
| LinkBaseURL || string || No || --- || The base url to use for anchors
|}

=== Examples ===

== setlinkType ==
Set linkType

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| linkType || string || Yes || --- || 
|}

=== Examples ===

== buildLink ==
Build a link for a package name

=== Returns ===
* This function returns ''string''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| package || string || Yes || --- || 
|}

=== Examples ===

== getrootPath ==
Get rootPath

=== Returns ===
* This function returns ''string''


=== Examples ===

== buildRootLink ==
Build a link for a root name

=== Returns ===
* This function returns ''string''


=== Examples ===

== setlstAccessTypes ==
Set lstAccessTypes

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| lstAccessTypes || string || Yes || --- || 
|}

=== Examples ===

== setLinkBaseURL ==


=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| LinkBaseURL || string || Yes || --- || 
|}

=== Examples ===

== getStyleSheet ==
Get the stylesheet to use when rendering the documentation.

=== Returns ===
* This function returns ''string''


=== Examples ===

== setrootPath ==
Set rootPath

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| rootPath || string || Yes || --- || 
|}

=== Examples ===

== setdirpath ==
Set the dirpath

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| dirpath || string || Yes || --- || 
|}

=== Examples ===

== getCFCMetaData ==
returns a structure with information about the given component. This structure contains information about returntype, methods, parameters, etc.

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| cfcName || string || Yes || --- || The name of the cfc
|}

=== Examples ===

== setStyleSheet ==
Set the stylesheet to use when rendering the documentation

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| styleSheet || string || Yes || --- || 
|}

=== Examples ===

== setaPacks ==
Set aPacks

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| aPacks || array || Yes || --- || 
|}

=== Examples ===

== getRenderingTemplate ==
Get rendering template to use

=== Returns ===
* This function returns ''string''


=== Examples ===

== getlinkString ==
Get linkString

=== Returns ===
* This function returns ''string''


=== Examples ===

== getaPacks ==
Get aPacks

=== Returns ===
* This function returns ''array''


=== Examples ===

== setaCFC ==
Set CFCs

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| aCFC || array || Yes || --- || 
|}

=== Examples ===

== getLinkBaseURL ==


=== Returns ===
* This function returns ''string''


=== Examples ===

== getlstAccessTypes ==
Get lstAccessTypes

=== Returns ===
* This function returns ''string''


=== Examples ===

== setlinkString ==
Set linkString

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| linkString || string || Yes || --- || 
|}

=== Examples ===

[[Dashboard | << Back to Dashboard ]]

{| align="right"
| __TOC__
|}

= Exploring the ClientStorage Plugin =


== Overview ==
Client Storage plugin. It provides the user with a mechanism for permanent data storage using the client scope and WDDX.


== clearAll ==
Clear the entire coldbox client storage

=== Returns ===
* This function returns ''void''


=== Examples ===

== exists ==
Checks wether the permanent variable exists.

=== Returns ===
* This function returns ''boolean''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|}

=== Examples ===

== getVar ==
Get a new permanent variable. If the variable does not exist. The method returns blank.

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|-
| default || any || No ||  || The default value to set. If not used, a blank is returned.
|}

=== Examples ===

== setVar ==
Set a new permanent variable.

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The name of the variable.
|-
| value || any || Yes || --- || The value to set in the variable.
|}

=== Examples ===

== getStorage ==
Get the entire storage scope structure

=== Returns ===
* This function returns ''struct''


=== Examples ===

== deleteVar ==
Tries to delete a permanent client var.

=== Returns ===
* This function returns ''boolean''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|}

=== Examples ===

[[Dashboard | << Back to Dashboard ]]

{| align="right"
| __TOC__
|}

= Exploring the ClusterStorage Plugin =


== Overview ==
Cluster Storage plugin. It provides the user with a mechanism for permanent data storage using the Cluster scope. This plugin creates a special variable in cluster scope that correctly identifies the coldbox app.


== setVar ==
Set a new permanent variable.

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The name of the variable.
|-
| value || any || Yes || --- || The value to set in the variable.
|}

=== Examples ===

== getVar ==
Get a new permanent variable. If the variable does not exist. The method returns blank unless using the default return argument.

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|-
| default || any || No ||  || The default value to set. If not used, a blank is returned.
|}

=== Examples ===

== removeStorage ==
remove the entire storage from scope

=== Returns ===
* This function returns ''void''


=== Examples ===

== exists ==
Checks wether the permanent variable exists.

=== Returns ===
* This function returns ''boolean''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|}

=== Examples ===

== clearAll ==
Clear the entire coldbox cluster storage

=== Returns ===
* This function returns ''void''


=== Examples ===

== deleteVar ==
Tries to delete a permanent cluster variable. Returns True if deleted.

=== Returns ===
* This function returns ''boolean''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|}

=== Examples ===

== getStorage ==
Get the entire storage scope structure

=== Returns ===
* This function returns ''struct''


=== Examples ===

[[Dashboard | << Back to Dashboard ]]

{| align="right"
| __TOC__
|}

= Exploring the CookieStorage Plugin =


== Overview ==
Cookie Storage plugin. It provides the user with a mechanism for permanent data storage using the cookie scope.


== getEncryptionAlgorithm ==
Get EncryptionAlgorithm

=== Returns ===
* This function returns ''string''


=== Examples ===

== setVar ==
Set a new permanent variable.

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The name of the variable.
|-
| value || any || Yes || --- || The value to set in the variable, simple, array, query or structure.
|-
| expires || numeric || No || 0 || Cookie Expire in number of days. [default cookie is session only = 0 days]
|-
| secure || boolean || No || false || If browser does not support Secure Sockets Layer (SSL) security, the cookie is not sent. To use the cookie, the page must be accessed using the https protocol.
|-
| path || string || No ||  || URL, within a domain, to which the cookie applies; typically a directory. Only pages in this path can use the cookie. By default, all pages on the server that set the cookie can access the cookie.
|-
| domain || string || No ||  || Domain in which cookie is valid and to which cookie content can be sent from the user's system.
|}

=== Examples ===

== getEncryptionKey ==
Get EncryptionKey

=== Returns ===
* This function returns ''string''


=== Examples ===

== getVar ==
Get a new permanent variable. If the cookie does not exist. The method returns blank.

=== Returns ===
* This function returns ''any''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|-
| default || any || No ||  || The default value to set. If not used, a blank is returned.
|}

=== Examples ===

== setEncryptionAlgorithm ==
Set EncryptionAlgorithm

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| EncryptionAlgorithm || string || Yes || --- || 
|}

=== Examples ===

== setEncryptionEncoding ==
Set EncryptionEncoding

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| EncryptionEncoding || string || Yes || --- || 
|}

=== Examples ===

== getEncryptionEncoding ==
Get EncryptionEncoding

=== Returns ===
* This function returns ''string''


=== Examples ===

== getEncryption ==
Get Encryption

=== Returns ===
* This function returns ''boolean''


=== Examples ===

== exists ==
Checks wether the permanent variable exists.

=== Returns ===
* This function returns ''boolean''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|}

=== Examples ===

== deleteVar ==
Tries to delete a permanent cookie var.

=== Returns ===
* This function returns ''boolean''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| name || string || Yes || --- || The variable name to retrieve.
|}

=== Examples ===

== setEncryption ==
Set Encryption

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| Encryption || boolean || Yes || --- || 
|}

=== Examples ===

== setEncryptionKey ==
Set EncryptionKey

=== Returns ===
* This function returns ''void''


=== Arguments ===

{| cellpadding="5", class="tablelisting"
! '''Key''' !! '''Type'''  !! '''Required''' !! '''Default''' !! '''Description''' 
|-
| EncryptionKey || string || Yes || --- || 
|}

=== Examples ===
