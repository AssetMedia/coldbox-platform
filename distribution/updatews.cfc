<cfcomponent hint="Auto Update ColdBox System">	<!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cfscript>	variables.DSN = "mysite";	variables.Distribution = structnew();	variables.Distribution.Version = "";	variables.Distribution.FileName = "";	variables.Distribution.UpdateFile = "";	variables.Distribution.ReadmeFile = getReadmeContents();	variables.Distribution.FileSize = "";	variables.Distribution.FileDate = "";	</cfscript><!------------------------------------------- PUBLIC ------------------------------------------->	<cffunction name="GetUpdateInfo" access="remote" returntype="struct" hint="Retrieve the current coldbox system information." output="false">		<!--- ************************************************************* --->		<cfargument name="version" required="yes" type="string" hint="The version to check for update.">		<!--- ************************************************************* --->		<cfset var rtnStruct = structnew()>		<!--- Parse Local Version --->		<cfset var MajorRelease = 0>		<cfset var MinorRelease = 0>		<cfset var Revision = 0>		<cfset var CurrentMajorRelease = 0>		<cfset var CurrentMinorRelease = 0>		<cfset var CurrentRevision = 0>		<!--- Return Structure --->		<cfset rtnStruct.error = 1>		<cfset rtnStruct.errorMessage = "">		<cfset rtnStruct.availableUpdate = false>		<cftry>			<!--- Get Version Information from database --->			<cfquery name="qColdboxInfo" datasource="#variables.DSN#">			select * from coldbox			</cfquery>			<!--- Set variables from query --->			<cfset variables.Distribution.Version = qColdboxInfo.currentversion>			<cfset MajorRelease = getToken(variables.Distribution.version,1,".")>			<cfset MinorRelease = getToken(variables.Distribution.version,2,".")>			<cfset Revision = getToken(variables.Distribution.version,3,".")>			<cfset variables.Distribution.FileName = "coldbox_" & qColdboxInfo.currentversion & ".zip">			<cfset variables.Distribution.UpdateFile = qColdboxInfo.Distro_url & variables.Distribution.FileName>			<cfset variables.Distribution.FileSize = getFileSize(ExpandPath(variables.Distribution.FileName))>			<cfset variables.Distribution.FileDate = getFileLastModified(ExpandPath(variables.Distribution.FileName))>			<!--- Copy Return Structure --->			<cfset rtnStruct.updateStruct = variables.Distribution>			<!--- Parse Remote Version --->			<cfif not find(".",arguments.version)>				<cfset rtnStruct.ErrorMessage = "Version number sent in: #arguments.version# is not valid.">				<cfreturn rtnStruct>			</cfif>			<!--- Get Major --->			<cfset CurrentMajorRelease = getToken(arguments.version,1,".")>			<!--- Get Minor --->			<cfset currentMinorRelease = left(getToken(arguments.version,2,"."),1)>			<!--- Test for Revision --->			<cfif listLen(arguments.version,".") gt 2>				<cfset CurrentRevision = getToken(arguments.version,3,".")>			</cfif>			<!--- Check For Update of versions --->			<cfif MajorRelease gt CurrentMajorRelease>				<cfset rtnStruct.availableUpdate = true>			<cfelseif MinorRelease gt CurrentMinorRelease>				<cfset rtnStruct.availableUpdate = true>			<cfelseif Revision gt CurrentRevision>				<cfset rtnStruct.availableUpdate = true>			</cfif>			<!--- Set error Free --->			<cfset rtnStruct.error = 0>			<!--- Catch Errors --->			<cfcatch type="any">				<cfset rtnStruct.errorMessage = "Error getting update info.<br>Diagnostics: #cfcatch.Detail# <br> #cfcatch.Message#">			</cfcatch>		</cftry>		<cfreturn rtnStruct>		<!--- ************************************************************* --->	</cffunction>	<cffunction name="getDistributionURL" access="remote" returntype="string" output="false">		<cfreturn variables.distributionURL>	</cffunction>	<cffunction name="getUpdateFile" access="remote" returntype="string" output="false">		<cfreturn variables.updateFile>	</cffunction><!------------------------------------------- PRIVATE ------------------------------------------->	<cffunction name="getFileSize" access="private" returntype="string" output="false">		<!--- ************************************************************* --->		<cfargument name="filename"   type="string" required="yes">		<cfargument name="sizeFormat" type="string" required="no" default="bytes" hint="Available formats: [bytes][kbytes][mbytes][gbytes]">		<!--- ************************************************************* --->		<cfscript>		var objFile =  createObject("java","java.io.File");		objFile.init(JavaCast("string", filename));		if ( arguments.sizeFormat eq "bytes" )			return objFile.length();		if ( arguments.sizeFormat eq "kbytes" )			return (objFile.length()/1024);		if ( arguments.sizeFormat eq "mbytes" )			return (objFile.length()/(1048576));		if ( arguments.sizeFormat eq "gbytes" )			return (objFile.length()/1073741824);		</cfscript>	</cffunction>	<cffunction name="getFileLastModified" access="private" returntype="string" output="false">		<!--- ************************************************************* --->		<cfargument name="filename" type="string" required="yes">		<!--- ************************************************************* --->		<cfscript>		var objFile =  createObject("java","java.io.File");		// Calculate adjustments fot timezone and daylightsavindtime		var Offset = ((GetTimeZoneInfo().utcHourOffset)+1)*-3600;		objFile.init(JavaCast("string", filename));		// Date is returned as number of seconds since 1-1-1970		return DateAdd('s', (Round(objFile.lastModified()/1000))+Offset, CreateDateTime(1970, 1, 1, 0, 0, 0));		</cfscript>	</cffunction>	<cffunction name="getReadmeContents" access="private" returntype="string" output="false">		<cfset var FileContents = "">		<cffile action="read" file="#expandPath("../builds/readme.txt")#" variable="FileContents">		<cfreturn FileContents>	</cffunction></cfcomponent>