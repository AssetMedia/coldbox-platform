{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww18000\viewh12460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 = !ColdBox FAQ =\
Here you can find some of the most common questions and answers. If you would like a question to be answered in this page, please submit it to [mailto:cfcoldbox@gmail.com] or post them on the [http://www.luismajano.com/forums/ ColdBox Forums]\
\
----\
[[PageOutline(2-6,,inline)]]\
----\
\
\
== Installation ==\
\
----\
\
=== > Do I need to place the !ColdBox system folder in every application I develop? ===\
\
==== For version(s) < 1.0.2 ====\
You will need to place the !ColdBox system folder in every application you develop. \
\
==== For version 1.1.0 > ==== \
You will have a one installation of !ColdBox per web server.  You can then opt to place the Dashboard or not in the installation folder. Just place the coldbox directory under your web root.\
\
 * For more information see the [wiki:cbInstallGuide]\
\
=== > Does !ColdBox work on !ColdFusion 6.X? ===\
\
Version 1.1.0  will have full support for 6.X, there are some subtle differences that prohibit the framework to not work from version 1.0.2 and below.  I give no support for the Dashboard on cfmx 6.0 or !BlueDragon, for now. You can check out some of the tickets for this [query:?status=new&status=assigned&status=reopened&status=closed&summary=%7E6.X&milestone=1.0.2&order=priority CFMX 6.X issues]\
\
You can download the updated bits for 6.X support on version 1.0.2 by using the link below:\
\
http://www.luismajano.com/blog/index.cfm/2006/7/26/ColdBox-ColdFusion-MX-6X-issues-and-support\
\
=== > Does !ColdBox work on Blue Dragon? ===\
Yes, !ColdBox will be supported and tested for Blue Dragon 6.2.1 and above from version 1.1.0 and above.  However, some plugins will not work like the !JavaLoader and the cfcViewer due to their java and coldfusion specific natures.  Also, the messagebox plugin cannot be used. You need to use the messageboxBD.cfc that is included. So if you will be running under Blue Dragon, then delete the original messagebox.cfc and replace it with the messageboxBD.cfc\
\
=== > I just downloaded the !ColdBox bundle archive, how do I install it? How do I start? ===\
\
- see [wiki:cbInstallGuide]\
\
=== > What are the framework's System Requirements?'' ===\
\
- see [wiki:cbSystemRequirements]\
\
\
----\
\
== Running !ColdBox ==\
\
----\
\
=== > What is the main difference between !ColdBox and other frameworks like fusebox, mach ii, and model glue? ===\
Well, the main difference is that !ColdBox is not based on a strict XML dialect but on ColdFusion itself.  The event handler cfc's hold your necessary code to call model cfc's and interact with user requests.  So instead of writing your declarations in XML and be restricted by it, you write your events in coldfusion and use the framework's methods to set views to render, call models, call plugins for application specific tasks, etc.\
\
Another main difference is that you can extend the framework by creating custom plugins.  You can build any amount of plugins and create you own library of tasks, etc. You can then easily instantiate them when needed by just declaring their main location in the framework's config.xml.\
\
You will be up and running quicker than you think.\
\
=== > What are events? ===\
Events are what makes a !ColdBox application actually do something. A user is\
able to call a specific 'event' normally by clicking a link, posting a\
form field, etc The framework will then parse and locate the correct event handler to instantiate and run. An event is analogous to a fuseaction in\
Fusebox.  You can set some of the implicit events in the config.xml like onRequestStart, onException, onApplicationStart, onRequestEnd, etc.\
\
\{\{\{\
http://mysite.com/index.cfm?event=ehGeneral.dspHome\
\}\}\}\
\
The latter, will tell the framework to run the dspHome method on the ehGeneral cfc\
\
\{\{\{\
<input type="hidden" name="event" value="ehGeneral.doLogin" />\
\
or\
\
<form action="index.cfm?event=ehGeneral.doLogin">\
\}\}\}\
\
The latter, will tell the framework to run the doLogin method on the ehGeneral cfc when the form is submitted.  I beleive you get the point.\
\
=== > What are event handlers? ===\
Event handlers are CFCs which contain public functions that are\
trigger by events.  They can also contain private/package functions that can be used by events but cannot be called implicitly by the framework.\
They are analogous to the controller circuits in a\
fusebox application with an important difference. \
\
\{\{\{\
#!html\
<blockquote>\
Event handlers are written in ColdFusion, instead of XML! With this power, the developer\
is given extreme flexibility. You can utilize the vast CF and ColdBox's API from\
within your event handlers. With this power comes a cost that some\
developers will be unable to determine what logic should be broken up\
into the model and which should remain in the controller. Keep in mind\
with a smaller event handler and a well-defined model API  your code\
will be easier to read and maintain. <br><br>While it may be tempting to\
insert some block of the code in your event handler which doesn't\
block there, <b>resist the urge</b>. This will lead to bad coding practices\
and other developers will follow in your footsteps. However, I must\
say that if you must this makes it very easy to test code quickly in\
your event handlers. :-) Hey, we are all guilty of bad habits\
sometimes...\
\
<b>by Aaron Conran</b>\
</blockquote>\
\}\}\}\
\
Event handlers are analogous to all the code we use to have at the top of our page which we used to call our models before or like many, did all the logic there. SO PLEASE DO NOT DO THAT. That is not the purpose. Best Practices, Best Practices!!\
\
Some people will say, why so much freedom? Well, you must be responsible for what you do, nobody likes to be limited in a square box.\
\
=== > What is the Request Collection? ===\
The request collection is a data structure that the framework creates for every user request. It captures the FORM and URL variables into this structure for you to use in your event handlers,layouts,views and plugins. Much like some other frameworks capture state.  You can then place values and get values from this structure from anywhere in the life cycle of a request.  You have the following methods at your disposal:\
\
  * '''getValue( value, defaultvalue)''' : You retrieve a value from the request collection. If the value does not exist it will then return the default value argument. You can send in simple or complex variables.  A special scope exists for event handlers called '''rc''' from which you can use to get and set values from instead of using the methods.\
\
\{\{\{\
<cfset rc.myVariable = "luis">\
<cfset rc.myStruct = StructNew()>\
<cfset rc.myStruct.date = now()>\
<cfset rc.myStruct.version = 1.1.0>\
\
//Then in your views\
<cfoutput>#getValue("myVariable", "My Default Value")#</cfoutput>\
\
My current version is #getValue("myStruct.version", "0")#\
\
The current date is #DateFormat( getValue("myStruct.date"), "MM/DD/YYYY")#\
\
//Alternative methods when using big structures or various usages of the variables. Get a reference to it in your views:\
<cfset myReference = getValue("myVariable")>\
\
<cfoutput>\
Many example #myReference.val1# will be #myReference.val2 + myReference.val3#\
</cfoutput>\
\
\}\}\}\
\
As you can see, there are many ways to use the request collection.\
\
  * '''setValue( variable_name, value )''' : You set a value in the request collection, you can also use the '''rc''' scope in the event handlers.\
\
  * '''valueExists( variable_name )''' : Returns a boolean of wether the variable_name exists in the request collection.\
\
  * '''valueParam( variable_name, default_value )''' : This method is analogous to the <cfparam> tag but for the request collection. You tell the framework to check if the variable_name exits in the request collection, if it doesn't then it will create it with the default value.\
\
=== > What is an application's Directory Structure? ===\
\
- see [wiki:cbDirectoryStructure]\
\
=== > What are the Naming Conventions? ===\
\
- see [wiki:cbNamingConventions]\
\
=== > Does !ColdBox support child applications? ===\
\
Yes, you basically create another [wiki:cbDirectoryStructure Directory Structure] and modify the index file to point to the !ColdBox installation folder: ex: /coldbox/system/coldbox.cfm\
\
=== > I just changed my config.xml but I don't get the results or the framework just does not start? ===\
\
- Well, you need to reload the structures by using the fwreinit=1 URL action via the index page. \
\
\
\{\{\{\
example: http://localhost/index.cfm?fwreinit=1\
\}\}\}\
\
\
or if you are in development you can use the !ConfigAutoReload setting in your config.xml. This will auto reload your settings if you are developing your application.\
\
\{\{\{\
#!text/xml\
<Setting name="ConfigAutoReload" value="true" />\
\}\}\}\
\
=== > I am using my own !CustomExceptionHandler and I don't get any more bug reports?  Why is this happening to me! ===\
\
Well, you decided to use your own exception handler, so you need to log the bug yourself!! So all you need to do is call\
\
\{\{\{\
#!text/html\
getPlugin("logger").logErrorWithBean(getvalue("ExceptionBean"));\
\}\}\}\
\
You are calling '''''logErrorWithBean''''' instead of just '''''logError''''', because you are dealing with a thrown exception already. However,\
if you wanted to, you can call log error, but send in the correct parameters. It goes to a bean anyways!!\
\
-See [wiki:cbExceptionHandler]\
\
=== > How do I get data from my event handlers to my layouts and views? ===\
\
Well, you use the request collection. You have the '''setValue()''' method that you use to set values in the request collection, which is a global data structure wher you can put and take values from anywhere in the framework: event handlers, layouts, views, plugins, etc.  In your views you can then use the '''getValue()''' method and retrieve your data.\
\
=== > Can I render something and place it in a variable? ====\
!ColdBox supports Content Variables via the '''renderView()''' method. So if you wanted to render a view and place it in a variable, all you need to do is:\
\
\{\{\{\
<cfset myCCV = renderView("customtags/navigation")>\
\}\}\}\
\
And that is it, you have '''myCCV''' containing the navigation view from the customtags directory under your views directory in your main application.\
----\
\
== Config.xml.cfm ==\
----\
\
=== >What is this AppMapping Stuff in my config.xml? Do I really need a coldfusion mapping ===\
\
- The answer is '''NO!!''' You can use a cfmx mapping or just a relative path mapping from your web server root. For example, your application's folder name is '''calculator''' and it lies in the root of the web server, so if you point to http://myserver.com/calculator you get to it. Then the AppMapping is just '''calculator'''.\
\
'''So basically, you can use coldfusion mappings in this entry or a relative path from the root of the web server.'''\
\
\{\{\{\
#!text/xml\
<Setting name="AppMapping" value="calculator" />\
//Another example using relative path\
//You go to http://myserver.com/sampleapps/test1/calculator\
<Setting name="AppMapping" value="sampleapps/test1/calculator" />\
\
\}\}\}\
\
\
\
----\
\
== !ColdBox Dashboard ==\
\
----\
\
=== > How do I go to my ColdBox Dashboard? ===\
\
==== Version(s) < 1.0.2 ====\
\
You go to your application/system/admin/index.cfm . So for example if your application's name is helloworld, then the url would be:\
\
\{\{\{\
http://localhost/helloworld/system/admin/index.cfm\
\}\}\}\
\
==== Version(s) >= 1.1.0 ====\
\
However, If you have installed ColdBox in the root of your web server, so it can be shared by all the applications, you would use  the following URL:\
\
\{\{\{\
http://localhost/coldbox/system/admin/index.cfm\
\}\}\}\
\
=== > What is my default ColdBox Dashboard Password? ===\
\
- Coldbox\
\
\
----\
'''[[BackLinks(cbFAQ)]]'''\
[[LastModified]]}