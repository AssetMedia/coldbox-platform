<!-----------------------------------------------------------------------********************************************************************************Copyright 2005-2008 ColdBox Framework by Luis Majano and Ortus Solutions, Corpwww.coldboxframework.com | www.luismajano.com | www.ortussolutions.com********************************************************************************Author: Luis MajanoDate:   September 27, 2005Description: This is the framework's logger object. It performs all necessary			 loggin procedures.-----------------------------------------------------------------------><cfcomponent hint="This is the frameworks Logger object. It is used for all logging facilities interfacing with LogBox and the ColdBox debugger."			 extends="coldbox.system.Plugin"			 output="false"			 cache="true"><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<!--- Constructor --->	<cffunction name="init" access="public" returntype="Logger" hint="Constructor" output="false">		<cfargument name="controller" type="any" required="true">		<cfscript>			super.Init(arguments.controller);						// setup properties			setpluginName("Logger");			setpluginVersion("1.1");			setpluginDescription("This plugin is used for logging methods and facilities interfacing to LogBox.");			setpluginAuthor("Luis Majano");			setpluginAuthorURL("http://www.coldbox.org");						// Set local Logger for this ColdBox Application, different from the local Log object.			instance.logger = logBox.getLogger(getSetting("AppName"));						return this;		</cfscript>	</cffunction><!------------------------------------------- PUBLIC ------------------------------------------->		<!--- getLogger --->
	<cffunction name="getLogger" output="false" access="public" returntype="coldbox.system.logging.Logger" hint="This coldbox apps's logger.">
		<cfreturn instance.logger>
	</cffunction>		<!--- Debug --->	<cffunction name="debug" access="public" output="false" returntype="void" hint="I log a debug message.">		<!--- ************************************************************* --->		<cfargument name="Message"   type="string" required="yes" hint="The message to log.">		<cfargument name="ExtraInfo" type="string" required="no" default="" hint="Extra information to append.">		<!--- ************************************************************* --->		<cfscript>			getLogger().debug(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- Info --->	<cffunction name="info" access="public" output="false" returntype="void" hint="I log an information message.">		<!--- ************************************************************* --->		<cfargument name="Message" type="string" required="yes" hint="The message to log.">		<cfargument name="ExtraInfo" type="string" required="no" default="" hint="Extra information to append.">		<!--- ************************************************************* --->		<cfscript>			getLogger().info(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- warn --->	<cffunction name="warn" access="public" output="false" returntype="void" hint="I log a warning message.">		<!--- ************************************************************* --->		<cfargument name="Message" type="string" required="yes" hint="The message to log.">		<cfargument name="ExtraInfo" type="string" required="no" default="" hint="Extra information to append.">		<!--- ************************************************************* --->		<cfscript>			getLogger().warn(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- Error --->	<cffunction name="error" access="public" output="false" returntype="void" hint="I log an error message.">		<!--- ************************************************************* --->		<cfargument name="Message" type="string" required="yes" hint="The message to log.">		<cfargument name="ExtraInfo" type="string" required="no" default="" hint="Extra information to append.">		<!--- ************************************************************* --->		<cfscript>			getLogger().error(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- Fatal --->	<cffunction name="fatal" access="public" output="false" returntype="void" hint="I log a fatal message.">		<!--- ************************************************************* --->		<cfargument name="Message" type="string" required="yes" hint="The message to log.">		<cfargument name="ExtraInfo" type="string" required="no" default="" hint="Extra information to append.">		<!--- ************************************************************* --->		<cfscript>			getLogger().fatal(argumentCollection=arguments);		</cfscript>	</cffunction>	<!--- Tracer --->	<cffunction name="tracer" access="public" hint="Log a trace message to the ColdBox debugger panel, not LOGBOX" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="message"    type="string" required="Yes" hint="Message to Send" >		<cfargument name="extraInfo"  required="No" default="" type="any" hint="Extra Information to dump on the trace">		<!--- ************************************************************* --->		<cfscript>			controller.getDebuggerService().pushTracer(argumentCollection=arguments);		</cfscript>	</cffunction>	<!--- Log Error with exception Bean --->	<cffunction name="logErrorWithBean" access="public" hint="Log an error into the framework using a coldbox exceptionBean" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="ExceptionBean" 	type="any" 	required="yes" hint="This is the exception bean">		<!--- ************************************************************* --->		<cfscript>			var Exception = arguments.ExceptionBean;			var myStringBuffer = "";						// Prepare log			if ( isStruct(Exception.getExceptionStruct()) ){				// Prepare String Buffer				myStringBuffer = getPlugin("StringBuffer").setup(BufferLength=500);								if ( Exception.getType() neq  "" ){					myStringBuffer.append("CFErrorType=" & Exception.getType() & chr(13) );				}				if ( Exception.getDetail() neq  "" ){					myStringBuffer.append("CFDetails=" & Exception.getDetail() & chr(13) );				}				if ( Exception.getMessage() neq "" ){					myStringBuffer.append("CFMessage=" & Exception.getMessage() & chr(13) );				}				if ( Exception.getStackTrace() neq "" ){					myStringBuffer.append("CFStackTrace=" & Exception.getStackTrace() & chr(13) );				}				if ( Exception.getTagContextAsString() neq "" ){					myStringBuffer.append("CFTagContext=" & Exception.getTagContextAsString() & chr(13) );				}			}						// Log The Entry			logEntry("error","#Exception.getExtraMessage()#",myStringBuffer.getString() );						// Check if Bug Reports are Enabled, then send Email Bug Report			if ( getSetting("EnableBugReports") and getSetting("BugEmails") neq "" ){				// Email Bug REport				emailBugReport(controller.getExceptionService().renderEmailBugReport(Exception));			}		</cfscript>	</cffunction>	<!--- Log Error Facade --->	<cffunction name="logError" access="public" hint="Log an error into the framework using arguments. Facade to logErrorWithBean." output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="Message" 			type="string" 	required="yes">		<cfargument name="ExceptionStruct" 	type="any"  	required="no" default="#StructNew()#" hint="The CF cfcatch structure.">		<cfargument name="ExtraInfo"  		type="any"    	required="no" default="">		<!--- ************************************************************* --->		<cfset logErrorWithBean(CreateObject("component","coldbox.system.beans.ExceptionBean").init(arguments.ExceptionStruct,arguments.message,arguments.ExtraInfo))>	</cffunction>	<!--- Log An Entry --->	<cffunction name="logEntry" access="public" hint="Log a message to the LogBox" output="false" returntype="void">		<!--- ************************************************************* --->		<cfargument name="Severity" 		type="string" 	required="yes" hint="Severity: fatal,error,warn,info,debug,trace">		<cfargument name="Message" 			type="string"  	required="yes" hint="The message to log.">		<cfargument name="ExtraInfo"		type="string"   required="no"  default="" hint="Extra information to append.">		<!--- ************************************************************* --->		<cfscript>			var logLevels = logBox.logLevels;						// Check log levels			if( NOT logLevels.isLevelValid(logLevels.lookupAsInt(arguments.severity)) ){				$throw(message="Invalid logging severity: #arguments.severity#",					   detail="Valid severites are: #logLevels.VALIDLEVELS#",					   type="Logger.InvalidSeverity");			}						//Log via logBox			getLogger().logMessage(arguments.message,logLevels.lookupAsInt(arguments.severity),arguments.extraInfo);		</cfscript>	</cffunction>		<!------------------------------------------- PRIVATE ------------------------------------------->	<!--- Email a Bug Report --->	<cffunction name="emailBugReport" access="private" returntype="void" hint="Email a bug report" output="false" >		<!--- ************************************************************* --->		<cfargument name="bugReport" required="true" type="string" hint="The bug report">		<!--- ************************************************************* --->				<!--- Setup The Subject --->		<cfset var logSubject = "#getSetting("Codename",1)# Bug Report: #getSetting("Environment")# - #getSetting("appname")#">				<!--- Check for Custom Mail Settings or use CFMX Administrator Settings --->		<cfif getSetting("MailServer") neq "" and 			  getSetting("MailUsername") neq "">			<!--- Mail New Bug --->			<cfmail to="#getSetting("BugEmails")#"					from="#getSetting("MailFrom")#"					subject="#logSubject#"					type="html"					server="#getSetting("MailServer")#"					username="#getSetting("MailUsername")#"					password="#getSetting("MailPassword")#">#arguments.BugReport#</cfmail>		<cfelse>			<!--- Mail New Bug --->			<cfmail to="#getSetting("BugEmails")#"					from="#getSetting("MailFrom")#"					subject="#logSubject#"					type="html">#arguments.BugReport#</cfmail>		</cfif>
	</cffunction></cfcomponent>