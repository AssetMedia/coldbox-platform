<!-----------------------------------------------------------------------********************************************************************************Copyright Since 2005 ColdBox Framework by Luis Majano and Ortus Solutions, Corpwww.coldbox.org | www.luismajano.com | www.ortussolutions.com********************************************************************************Author 	 :	Luis MajanoDate     :	September 23, 2005Description :	A cool utility that helps you when working with HTMLModification History:-----------------------------------------------------------------------><cfcomponent hint="A cool utility that helps you when working with HTML, from creating doc types, to managing your js/css assets, to rendering tables and lists from data"       		 output="false"       		 singleton><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cffunction name="init" access="public" returntype="HTMLHelper" output="false">		<cfscript>						setpluginName("HTMLHelper");			setpluginVersion("1.0");			setpluginDescription("A cool utility that helps you when working with HTML");			setpluginAuthor("Luis Majano");			setpluginAuthorURL("http://www.coldbox.org");						return this;		</cfscript>	</cffunction><!------------------------------------------- PUBLIC HELPER METHODS ------------------------------------------>	<!--- addJSContent --->    <cffunction name="addJSContent" output="false" access="public" returntype="any" hint="Open and close xhtml javascript tags so you can easily just add content">    	<cfargument name="content" 		type="any" 		required="true" hint="The content to render out"/>		<cfargument name="addToHeader"	type="boolean" 	required="false" default="false" hint="Send to header or return content"/>    	<cfscript>    		var str = '<script type="text/javascript"><![CDATA[#arguments.content#//]]></script>';    		if( arguments.addToHeader ){	    		$htmlhead( str );			}	    	return str;		</cfscript>    </cffunction>	<!--- addCSSContent --->    <cffunction name="addStyleContent" output="false" access="public" returntype="any" hint="Open and close xhtml style tags so you can easily just add content">    	<cfargument name="content" 		type="any" 		required="true" hint="The content to render out"/>    	<cfargument name="addToHeader"	type="boolean" 	required="false" default="false" hint="Send to header or return content"/>    	<cfscript>    		var str = '<style type="text/css">#arguments.content#</style>';			if( arguments.addToHeader ){	    		$htmlhead( str );			}	    	return str;		</cfscript>    </cffunction>	<!--- addAsset --->	<cffunction name="addAsset" output="false" access="public" returntype="any" hint="Add a js/css asset(s) to the html head section. You can also pass in a list of assets via the asset argument to try to load all of them.  You can also make this method return the string that will be sent to the header instead.">		<cfargument name="asset" 		type="any" 		required="true" hint="The asset(s) to load, only js or css files. This can also be a comma delimmited list."/>		<cfargument name="sendToHeader" type="boolean"  required="false" default="true" hint="Send to the header via htmlhead by default, else it returns the content"/>		<cfscript>			var sb 			= createObject("java","java.lang.StringBuffer").init('');			var x 			= 1;			var thisAsset   = "";			var event		= controller.getRequestService().getContext();						// request assets storage			event.paramValue(name="cbox_assets",value="",private=true);						for(x=1; x lte listLen(arguments.asset); x=x+1){				thisAsset = listGetAt(arguments.asset,x);				// Is asset already loaded				if( NOT listFindNoCase(event.getValue(name="cbox_assets",private=true),thisAsset) ){										// Load Asset					if( listLast(thisAsset,".") eq "js" ){						sb.append('<script src="#thisAsset#" type="text/javascript"></script>');					}					else{						sb.append('<link href="#thisAsset#" type="text/css" rel="stylesheet" />');					}										// Store It as Loaded					event.setValue(name="cbox_assets",value=listAppend(event.getValue(name="cbox_assets",private=true),thisAsset),private=true);				}			}						//Load it			if( len(sb.toString()) and arguments.sendToHeader ){				$htmlhead(sb.toString());			}			else{				return sb.toString();			}		</cfscript>	</cffunction>		<!--- br --->    <cffunction name="br" output="false" access="public" returntype="any" hint="Generate line breaks">    	<cfargument name="count" type="numeric" required="false" default="1" hint="The number of breaks"/>    	<cfreturn repeatString("<br/>",arguments.count)>    </cffunction>		<!--- nbs --->    <cffunction name="nbs" output="false" access="public" returntype="any" hint="Generate non-breaking spaces (&nbsp;)">    	<cfargument name="count" type="numeric" required="false" default="1" hint="The number of spaces"/>    	<cfreturn repeatString("&nbsp;",arguments.count)>    </cffunction>	<!--- heading --->    <cffunction name="heading" output="false" access="public" returntype="any" hint="Generate header tags">		<cfargument name="title" type="string" required="true"  hint="The header content"/>		<cfargument name="size" type="numeric" required="false" default="1" hint="The header size: h1, h2, hx"/>		<cfreturn "<h#arguments.size#>#arguments.title#</h#arguments.size#>">    </cffunction>		<!--- tag --->    <cffunction name="tag" output="false" access="public" returntype="any" hint="Surround content with a tag">		<cfargument name="tag" 		  type="string" required="true"  hint="The tag to generate"/>		<cfargument name="content"    type="string" required="false" default=""  hint="The content of the tag"/>		<cfscript>			var tagBuffer	= createObject("java","java.lang.StringBuffer").init("<#arguments.tag#");						// append tag attributes			flattenAttributes(arguments,"tag,content",tagBuffer).append('>#arguments.content#</#arguments.tag#>');						return tagBuffer.toString();		</cfscript>    </cffunction>		<!--- link --->    <cffunction name="link" output="false" access="public" returntype="any" hint="Create link tags, using the SES base URL or not">    	<cfargument name="href" 	 	type="any" 		required="true" hint="The href link to link to"/>		<cfargument name="rel" 		 	type="any"  	required="false"	default="stylesheet" hint="The rel attribute"/>		<cfargument name="type" 	 	type="any"  	required="false" 	default="text/css" hint="The type attribute"/>		<cfargument name="title"	 	type="any" 		required="false" 	default="" hint="The title attribute"/>		<cfargument name="media" 	 	type="any"  	required="false" 	default="" hint="The media attribute"/>		<cfargument name="noBaseURL" 	type="boolean" 	required="false" 	default="false" hint="Prepends the setting of baseURL if false"/>		<cfargument name="charset" 		type="any" 		required="false" 	default="UTF-8" hint="The charset to add, defaults to utf-8"/>		<cfscript>			var link 		= createObject("java","java.lang.StringBuffer").init("<link");						// Check if we have a base URL			arguments.href = prepareBaseLink(arguments.noBaseURL,arguments.href);			// build link			flattenAttributes(arguments,"noBaseURL",link).append('/>');						return link.toString();					</cfscript>			</cffunction>		<!--- img --->    <cffunction name="img" output="false" access="public" returntype="any" hint="Create image tags using the SES base URL or not">    	<cfargument name="src" 		 type="any" 	required="true" hint="The source URL to link to"/>		<cfargument name="alt" 		 type="string"  required="false" default="" hint="The alt tag"/>		<cfargument name="class" 	 type="string"  required="false" default="" hint="The class tag"/>		<cfargument name="width" 	 type="string"  required="false" default="" hint="The width tag"/>		<cfargument name="height"    type="string"  required="false" default="" hint="The height tag"/>		<cfargument name="title" 	 type="string"  required="false" default="" hint="The title tag"/>		<cfargument name="rel" 		 type="string"  required="false" default="" hint="The rel tag"/>		<cfargument name="name" 	 type="string"  required="false" default="" hint="The name tag"/>		<cfargument name="noBaseURL" type="boolean" required="false" default="false" hint="Prepends the setting of baseURL if false"/>		<cfscript>			var img 		= createObject("java","java.lang.StringBuffer").init("<img");						// Name check			if( len(arguments.name) AND NOT structKeyExists(arguments,"id") ){ arguments.id = arguments.name; }						// Check if we have a base URL			arguments.src = prepareBaseLink(arguments.noBaseURL, arguments.src);						// create image			flattenAttributes(arguments,"noBaseURL",img).append(' />');						return img.toString();		</cfscript>    </cffunction>		<!--- ul --->    <cffunction name="ul" output="false" access="public" returntype="any" hint="Create un-ordered lists according to passed in values and arguments, compressed HTML">    	<cfargument name="values" 		type="any" 	  required="true"  default="" hint="An array of values or list of values"/>		<cfargument name="column"  	 	type="string" required="false" default="" hint="If the values is a query, this is the name of the column to get the data from to create the list"/>		<cfset arguments.tag = "ul">		<cfreturn toHTMLList(argumentCollection=arguments)>    </cffunction>		<!--- ol --->    <cffunction name="ol" output="false" access="public" returntype="any" hint="Create ordered lists according to passed in values and arguments, compressed HTML">    	<cfargument name="values" 		type="any" 	  required="true"  default="" hint="An array of values or list of values"/>		<cfargument name="column"  	 	type="string" required="false" default="" hint="If the values is a query, this is the name of the column to get the data from to create the list"/>		<cfset arguments.tag = "ol">		<cfreturn toHTMLList(argumentCollection=arguments)>    </cffunction>		<!--- toHTMLList --->    <cffunction name="toHTMLList" output="false" access="private" returntype="any" hint="Convert a sent in tag type to an HTML list">    	<cfargument name="tag"   		type="string" required="true" hint="The list tag type"/>    	<cfargument name="values" 		type="any"    required="true" default="" hint="An array of values or list of values"/>		<cfargument name="column"  	 	type="string" required="false" default="" hint="If the values is a query, this is the name of the column to get the data from to create the list"/>		<cfscript>    		var val 	= arguments.values;			var x   	= 1;			var str 	= createObject("java","java.lang.StringBuffer").init("");			var br  	= chr(13);			var args	= "";						// list or array or query?			if( isSimpleValue(val) ){ val = listToArray(val); }			if( isQuery(val) ){ val = getPlugin("QueryHelper").getColumnArray(val,arguments.column); }						// start tag			str.append("<#arguments.tag#");			// flatten extra attributes via arguments			flattenAttributes(arguments,"tag,values,column",str).append(">");						// values				for(x=1; x lte arrayLen(val); x=x+1){								if( isArray(val[x]) ){					str.append( toHTMLList(arguments.tag,val[x],arguments.column) );				}				else{					str.append("<li>#val[x]#</li>");				}							}						str.append("</#arguments.tag#>");			return str.toString();		</cfscript>    </cffunction>		<!--- table --->    <cffunction name="table" output="false" access="public" returntype="any" hint="Convert a table out of data (either a query or array of structures or array of entities)">    	<cfargument name="data" 		type="any"    	 required="true"  hint="The query or array of structures or array of entities to convert into a table"/>		<cfargument name="includes" 	type="string"    required="false" default=""  hint="The columns to include in the rendering"/>		<cfargument name="excludes" 	type="string"    required="false" default=""  hint="The columns to exclude in the rendering"/>		<cfargument name="name" 		type="string"  	 required="false" default="" hint="The name tag"/>		<cfscript>    		var str    = createObject("java","java.lang.StringBuffer").init('');			var attrs  = "";			var key    = "";						// Name check			if( len(arguments.name) AND NOT structKeyExists(arguments,"id") ){ arguments.id = arguments.name; }						// Start Table			str.append("<table");						// flatten extra attributes via arguments			flattenAttributes(arguments,"data,includes,excludes",str).append("><thead><tr>");						// Buffer Reference			arguments.buffer = str;						// Convert Query To Table Body			if( isQuery(arguments.data) ){				queryToTable(argumentCollection=arguments);			}			// Convert Array to Table Body			else if( isArray(arguments.data) and arrayLen(arguments.data) ){							// Check first element for an object, if it is then convert to query				if( isObject(arguments.data[1]) ){					arguments.data = entityToQuery(arguments.data);					queryToTable(argumentCollection=arguments);				}				else{					arrayToTable(argumentCollection=arguments);				}			}						// Finalize table			str.append("</tbody></table>");    		    		return str.toString();		</cfscript>    </cffunction>		<!--- arrayToTable --->    <cffunction name="arrayToTable" output="false" access="private" returntype="void" hint="Convert a table out of an array">    	<cfargument name="data" 		type="any"    	 required="true"  hint="The array to convert into a table"/>		<cfargument name="includes" 	type="string"    required="false" default=""  hint="The columns to include in the rendering"/>		<cfargument name="excludes" 	type="string"    required="false" default=""  hint="The columns to exclude in the rendering"/>		<cfargument name="buffer" 		type="any" 	 	 required="true"/>		<cfscript>    		var str    = arguments.buffer;			var attrs  = "";			var x      = 1;			var y	   = 1;			var key    = "";			var cols   = listToArray(structKeyList(data[1]));						// Render Headers			for(x=1; x lte arrayLen(cols); x=x+1){				// Display?				if( passIncludeExclude(cols[x],arguments.includes,arguments.excludes) ){ 					str.append("<th>#cols[x]#</th>");				}			}			str.append("</tr></thead>");						// Render Body			str.append("<tbody>");			for(x=1; x lte arrayLen(arguments.data); x=x+1){				str.append("<tr>");				for(y=1; y lte arrayLen(cols); y=y+1){					// Display?					if( passIncludeExclude(cols[y],arguments.includes,arguments.excludes) ){ 						str.append("<td>#arguments.data[x][cols[y]]#</td>");					}				}				str.append("</tr>");			}		</cfscript>    </cffunction>		<!--- queryToTable --->    <cffunction name="queryToTable" output="false" access="private" returntype="void" hint="Convert a table out of an array of structures">    	<cfargument name="data" 		type="any"    	 required="true"  hint="The query to convert into a table"/>		<cfargument name="includes" 	type="string"    required="false" default=""  hint="The columns to include in the rendering"/>		<cfargument name="excludes" 	type="string"    required="false" default=""  hint="The columns to exclude in the rendering"/>		<cfargument name="buffer" 		type="any" 	 	 required="true"/>		<cfscript>    		var str    = arguments.buffer;			var cols   = listToArray(arguments.data.columnList);			var x      = 1;			var y	   = 1;						// Render Headers			for(x=1; x lte arrayLen(cols); x=x+1){				// Display?				if( passIncludeExclude(cols[x],arguments.includes,arguments.excludes) ){ 					str.append("<th>#cols[x]#</th>");				}			}			str.append("</tr></thead>");						// Render Body			str.append("<tbody>");			for(x=1; x lte arguments.data.recordcount; x=x+1){				str.append("<tr>");				for(y=1; y lte arrayLen(cols); y=y+1){					// Display?					if( passIncludeExclude(cols[y],arguments.includes,arguments.excludes) ){ 						str.append("<td>#arguments.data[cols[y]][x]#</td>");					}				}				str.append("</tr>");			}		</cfscript>    </cffunction>	<!--- meta --->    <cffunction name="meta" output="false" access="public" returntype="any" hint="Helps you generate meta tags">    	<cfargument name="name" 	type="any" 		required="true" hint="A name for the meta tag or an array of struct data to convert to meta tags.Keys [name,content,type]"/>		<cfargument name="content" 	type="any" 		required="false" default="" hint="The content attribute"/>		<cfargument name="type" 	type="string"   required="false" default="name" hint="Either ''name'' or ''equiv'' which produces http-equiv instead of the name"/>		<cfscript>			var x 		= 1;			var buffer  = createObject("java","java.lang.StringBuffer").init("");			var tmpType = "";						// prep type    		if( arguments.type eq "equiv" ){ arguments.type = "http-equiv"; };						// Array of structs or simple value			if( isSimpleValue(arguments.name) ){				return '<meta #arguments.type#="#arguments.name#" content="#arguments.content#" />';			}						for(x=1; x lte arrayLen(arguments.name); x=x+1 ){				if( NOT structKeyExists(arguments.name[x], "type") ){					arguments.name[x].type = "name";				}				if(  arguments.name[x].type eq "equiv" ){					arguments.name[x].type = "http-equiv";				}								buffer.append('<meta #arguments.name[x].type#="#arguments.name[x].name#" content="#arguments.name[x].content#" />');			}						return buffer.toString();		</cfscript>    </cffunction>	<!--- docType --->    <cffunction name="docType" output="false" access="public" returntype="any" hint="Render a doctype by type name: xhtml11,xhtml1-strict,xhtml-trans,xthml-frame,html5,html4-strict,html4-trans,html4-frame">    	<cfargument name="type" type="string" required="false" default="xhtml1-trans" hint="The doctype to generate"/>    	<cfscript>    		switch( arguments.type ){				case 'xhtml11' 		 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">'; }				case 'xhtml1-strict' : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'; }				case 'xhtml1-trans' : default	 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'; }				case 'xhtml1-frame'	 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">'; }				case 'html5'		 : { return '<!DOCTYPE html>'; }				case 'html4-strict'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">'; }				case 'html4-trans'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">'; }				case 'html4-frame'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">'; }			}		</cfscript>    </cffunction>	<!--- slugify --->
    <cffunction name="slugify" output="false" access="public" returntype="string" hint="Create a URL safe slug from a string">
    	<cfargument name="str" type="string" required="true" hint="The string to slugify"/>		<cfscript>	    	// Cleanup and slugify the string			var slug = lcase(trim(arguments.str));						slug = reReplace(slug,"[^a-z0-9-]","-","all");			slug = reReplace(slug,"-{2,}","-","all");						// check starting -			if( left(slug,1) eq "-" ){ slug = right(slug, len(slug)-1); }			if( right(slug,1) eq "-" ){ slug = left(slug, len(slug)-1); }						return slug;		</cfscript>    			</cffunction>		<!--- autoDiscoveryLink --->
    <cffunction name="autoDiscoveryLink" output="false" access="public" returntype="any" hint="Creates auto discovery links for RSS and ATOM feeds.">
    	<cfargument name="type" 		type="string" 	required="false" default="RSS" hint="Type of feed: RSS or ATOM or Custom Type"/>    	<cfargument name="href" 	 	type="any" 		required="false" hint="The href link to discover"/>		<cfargument name="rel" 		 	type="any"  	required="false" default="alternate" hint="The rel attribute"/>		<cfargument name="title"	 	type="any" 		required="false" default="" hint="The title attribute"/>		<cfscript>			var link 		= createObject("java","java.lang.StringBuffer").init("<link");						// type: determination			switch(arguments.type){				case "rss"  : { arguments.type = "application/rss+xml";  break;}				case "atom" : { arguments.type = "application/atom+xml"; break;}				default 	: { arguments.type = arguments.type; }			}							// create link			flattenAttributes(arguments,"",link).append('/>');						return link.toString();				</cfscript>
    </cffunction>
	<!--- video --->
    <cffunction name="video" output="false" access="public" returntype="any" hint="Create an HTML 5 video tag">
    	<cfargument name="src" 		 type="any" 	required="true" hint="The source URL or array or list of URL's to create video tags for"/>		<cfargument name="width" 	 type="string"  required="false" default="" hint="The width tag"/>		<cfargument name="height"    type="string"  required="false" default="" hint="The height tag"/>		<cfargument name="poster"  	 type="string"  required="false" default="" hint="The URL of the image when video is unavailable"/>		<cfargument name="autoplay"  type="boolean" required="false" default="false" hint="Whether or not to start playing the video as soon as it can"/>		<cfargument name="controls"  type="boolean" required="false" default="true" hint="Whether or not to show controls on the video player"/>		<cfargument name="loop"  	 type="boolean" required="false" default="false" hint="Whether or not to loop the video over and over again"/>		<cfargument name="preload"   type="boolean" required="false" default="false" hint="If true, the video will be loaded at page load, and ready to run. Ignored if 'autoplay' is present"/>		<cfargument name="noBaseURL" type="boolean" required="false" default="false" hint="Prepends the setting of baseURL if false"/>		<cfscript>    		var video 		= createObject("java","java.lang.StringBuffer").init("<video");			var x			= 1;						// autoplay diff			if( arguments.autoplay ){ arguments.autoplay = "autoplay";}			else{ arguments.autoplay = "";}			// controls diff			if( arguments.controls ){ arguments.controls = "controls";}			else{ arguments.controls = "";}			// loop diff			if( arguments.loop ){ arguments.loop = "loop";}			else{ arguments.loop = "";}			// preLoad diff			if( arguments.preLoad ){ arguments.preLoad = "preload";}			else{ arguments.preLoad = "";}						// src array check			if( isSimpleValue(arguments.src) ){ arguments.src = listToArray(arguments.src); }						// create video tag			flattenAttributes(arguments,"noBaseURL,src",video);						// Add single source			if( arrayLen(arguments.src) eq 1){				arguments.src[1] = prepareBaseLink(arguments.noBaseURL, arguments.src[1]);				video.append(' src="#arguments.src[1]#" />');				return video.toString();							}						// create source tags			video.append(">");			for(x=1; x lte arrayLen(arguments.src); x++){				arguments.src[x] = prepareBaseLink(arguments.noBaseURL, arguments.src[x]);				video.append('<source src="#arguments.src[x]#"/>');			}			video.append("</video>");						return video.toString();		</cfscript>
    </cffunction>		<!--- audio --->    <cffunction name="audio" output="false" access="public" returntype="any" hint="Create an HTML 5 audio tag">    	<cfargument name="src" 		 type="any" 	required="true" hint="The source URL or array or list of URL's to create audio tags for"/>		<cfargument name="autoplay"  type="boolean" required="false" default="false" hint="Whether or not to start playing the audio as soon as it can"/>		<cfargument name="controls"  type="boolean" required="false" default="true" hint="Whether or not to show controls on the audio player"/>		<cfargument name="loop"  	 type="boolean" required="false" default="false" hint="Whether or not to loop the audio over and over again"/>		<cfargument name="preLoad"   type="boolean" required="false" default="false" hint="If true, the audio will be loaded at page load, and ready to run. Ignored if 'autoplay' is present"/>		<cfargument name="noBaseURL" type="boolean" required="false" default="false" hint="Prepends the setting of baseURL if false"/>		<cfscript>    		var audio 		= createObject("java","java.lang.StringBuffer").init("<audio");			var x			= 1;						// autoplay diff			if( arguments.autoplay ){ arguments.autoplay = "autoplay";}			else{ arguments.autoplay = "";}			// controls diff			if( arguments.controls ){ arguments.controls = "controls";}			else{ arguments.controls = "";}			// loop diff			if( arguments.loop ){ arguments.loop = "loop";}			else{ arguments.loop = "";}			// preLoad diff			if( arguments.preLoad ){ arguments.preLoad = "preload";}			else{ arguments.preLoad = "";}						// src array check			if( isSimpleValue(arguments.src) ){ arguments.src = listToArray(arguments.src); }						// create video tag			flattenAttributes(arguments,"noBaseURL,src",audio);						// Add single source			if( arrayLen(arguments.src) eq 1){				arguments.src[1] = prepareBaseLink(arguments.noBaseURL, arguments.src[1]);				audio.append(' src="#arguments.src[1]#" />');				return audio.toString();							}						// create source tags			audio.append(">");			for(x=1; x lte arrayLen(arguments.src); x++){				arguments.src[x] = prepareBaseLink(arguments.noBaseURL, arguments.src[x]);				audio.append('<source src="#arguments.src[x]#"/>');			}			audio.append("</audio>");						return audio.toString();		</cfscript>    </cffunction>
	<!--- canvas --->
    <cffunction name="canvas" output="false" access="public" returntype="any" hint="Create a canvas tag">
    	<cfargument name="id" 		 type="string"  required="true"  hint="The id of the canvas"/>		<cfargument name="width" 	 type="string"  required="false" default="" hint="The width tag"/>		<cfargument name="height"    type="string"  required="false" default="" hint="The height tag"/>		<cfscript>			var canvas 		= createObject("java","java.lang.StringBuffer").init("<canvas");						// create canvas tag			flattenAttributes(arguments,"",canvas).append("></canvas>");						return canvas.toString();		</cfscript>
    </cffunction>
	<!--- startForm --->
    <cffunction name="startForm" output="false" access="public" returntype="any" hint="Create cool form tags. Any extra argument will be passed as attributes to the form tag">
    	<cfargument name="action" 		type="string" 	required="true" 	hint="The event or route action to submit to.  This will be inflated using the request's base URL if not a full http URL"/>    	<cfargument name="name" 		type="string" 	required="false" 	default="" hint="The name of the form tag"/>		<cfargument name="method" 		type="string" 	required="false" 	default="POST" 	hint="The HTTP method of the form: POST or GET"/>		<cfargument name="multipart" 	type="boolean" 	required="false" 	default="false"	hint="Set the multipart encoding type on the form"/>		<cfargument name="ssl" 			type="boolean" 	required="false" 	default="false" hint="If true, it will change http to https if found in the ses base url ONLY"/>	    <cfargument name="noBaseURL" 	type="boolean" 	required="false" 	default="false" hint="Prepends the setting of baseURL if false"/>		<cfscript>			var formBuffer		= createObject("java","java.lang.StringBuffer").init("<form");						// Check if we have a base URL and if we need to build our link			if( arguments.noBaseURL eq FALSE and NOT find("://",arguments.action)){				arguments.action = controller.getRequestService().getContext().buildLink(linkto=arguments.action,ssl=arguments.ssl);			}						// Name check			if( len(arguments.name) AND NOT structKeyExists(arguments,"id") ){ arguments.id = arguments.name; }						// Multipart Encoding Type			if( arguments.multipart ){ arguments.enctype = "multipart/form-data"; }			else{ arguments.enctype = "";}					// create tag			flattenAttributes(arguments,"noBaseURL,ssl,multipart",formBuffer).append(">");						return formBuffer.toString();				</cfscript>
    </cffunction>
		<!--- endForm --->
    <cffunction name="endForm" output="false" access="public" returntype="any" hint="End a form tag">
    	<cfreturn "</form>">
    </cffunction>		<!--- label --->	<cffunction name="label" access="public" returntype="any" output="false" hint="Render a label tag. Remember that any extra arguments are passed as tag attributes">		<cfargument name="field" 		type="string" required="true"  hint="The for who?"/>		<cfargument name="content" 		type="string" required="false" default="" hint="The label content. If not passed the field is used"/>		<cfargument name="wrapper" 		type="string" required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfscript>			var buffer = createObject("java","java.lang.StringBuffer").init('');						// wrapper?			wrapTag(buffer,arguments.wrapper);						// get content			if( NOT len(content) ){ arguments.content = makePretty(arguments.field); }			arguments.for = arguments.field;			// create label tag			buffer.append("<label");			flattenAttributes(arguments,"content,field,wrapper",buffer).append(">#arguments.content#</label>");						//wrapper?			wrapTag(buffer,arguments.wrapper,1);						return buffer.toString();		</cfscript>	</cffunction>		<!--- textArea --->	<cffunction name="textArea" access="public" returntype="any" output="false" hint="Render out a textarea. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the textarea"/>		<cfargument name="cols" 		type="numeric" 	required="false" hint="The number of columns"/>		<cfargument name="rows" 		type="numeric" 	required="false" hint="The number of rows"/>		<cfargument name="value" 		type="string"	required="false" default="" hint="The value of the textarea"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly" 	type="boolean" 	required="false" default="false" hint="Readonly"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			var buffer = createObject("java","java.lang.StringBuffer").init('');						// id			if( NOT structKeyExists(arguments,"id") ){ arguments.id = arguments.name; }						// label?			if( len(arguments.label) ){ buffer.append( this.label(field=arguments.label,wrapper=arguments.labelWrapper) ); }						//wrapper?			wrapTag(buffer,arguments.wrapper);						// disabled fix			if( arguments.disabled ){ arguments.disabled = "disabled"; }			else{ arguments.disabled = ""; }			// readonly fix			if( arguments.readonly ){ arguments.readonly = "readonly"; }			else{ arguments.readonly = ""; }						// create textarea			buffer.append("<textarea");			flattenAttributes(arguments,"value,label,wrapper,labelWrapper",buffer).append(">#arguments.value#</textarea>");						//wrapper?			wrapTag(buffer,arguments.wrapper,1);						return buffer.toString();			</cfscript>	</cffunction>		<!--- passwordField --->	<cffunction name="passwordField" access="public" returntype="any" output="false" hint="Render out a password field. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly" 	type="boolean" 	required="false" default="false" hint="Readonly"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="password";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- hiddenField --->	<cffunction name="hiddenField" access="public" returntype="any" output="false" hint="Render out a hidden field. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="hidden";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>	
	<!--- textField --->	<cffunction name="textField" access="public" returntype="any" output="false" hint="Render out a text field. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly" 	type="boolean" 	required="false" default="false" hint="Readonly"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="text";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- button --->	<cffunction name="button" access="public" returntype="any" output="false" hint="Render out a button. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled button or not?"/>		<cfargument name="type" 		type="string"   required="false" default="button" hint="The type of button to create: button, reset or submit"/>    	<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			var buffer = createObject("java","java.lang.StringBuffer").init('');						// id			if( NOT structKeyExists(arguments,"id") ){ arguments.id = arguments.name; }						// label?			if( len(arguments.label) ){ buffer.append( this.label(field=arguments.label,wrapper=arguments.labelWrapper) ); }						//wrapper?			wrapTag(buffer,arguments.wrapper);						// disabled fix			if( arguments.disabled ){ arguments.disabled = "disabled"; }			else{ arguments.disabled = ""; }						// create textarea			buffer.append("<button");			flattenAttributes(arguments,"value,label,wrapper,labelWrapper",buffer).append(">#arguments.value#</button>");						//wrapper?			wrapTag(buffer,arguments.wrapper,1);						return buffer.toString();			</cfscript>	</cffunction>		<!--- fileField --->	<cffunction name="fileField" access="public" returntype="any" output="false" hint="Render out a file field. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="readonly" 	type="boolean" 	required="false" default="false" hint="Readonly"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="file";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- checkBox --->	<cffunction name="checkBox" access="public" returntype="any" output="false" hint="Render out a checkbox. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="true" hint="The value of the field, defaults to true"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="checked" 		type="boolean" 	required="false" default="false" hint="Checked"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="checkbox";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- radioButton --->	<cffunction name="radioButton" access="public" returntype="any" output="false" hint="Render out a radio button. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="true" hint="The value of the field, defaults to true"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="checked" 		type="boolean" 	required="false" default="false" hint="Checked"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="radio";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- submitButton --->	<cffunction name="submitButton" access="public" returntype="any" output="false" hint="Render out a submit button. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="Submit" hint="The value of the field"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="submit";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- resetButton --->	<cffunction name="resetButton" access="public" returntype="any" output="false" hint="Render out a reset button. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="Reset" hint="The value of the field"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="reset";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- imageButton --->	<cffunction name="imageButton" access="public" returntype="any" output="false" hint="Render out a image button. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 		type="string" 	required="true"  hint="The name of the field"/>		<cfargument name="src" 			type="string"	required="true"  hint="The image src"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			arguments.type="image";			return createInput(argumentCollection=arguments);		</cfscript>	</cffunction>		<!--- options --->	<cffunction name="options" access="public" returntype="any" output="false" hint="Render out options. Remember that any extra arguments are passed as tag attributes">		<cfargument name="values" 			type="any"		required="false" hint="The values array, list, or query to build options for"/>		<cfargument name="column" 			type="string" 	required="false" default=""  hint="If using a query or array of objects the column to display as value and name"/>		<cfargument name="nameColumn" 		type="string" 	required="false" default=""  hint="If using a query or array of objects, the name column to display, if not passed defaults to the value column"/>		<cfargument name="selectedIndex" 	type="numeric" 	required="false" default="0" hint="selected index"/>		<cfargument name="selectedValue" 	type="string" 	required="false" default="" hint="selected value if any"/>		<cfscript>			var buffer 		= createObject("java","java.lang.StringBuffer").init('');			var val 		= "";			var nameVal		= "";			var x   		= 1;			var qColumns 	= "";			var qHelper		= getPlugin("QueryHelper");			var thisName	= "";			var thisValue	= "";						// check if an array? So we can do array of objects check			if( isArray(arguments.values) AND arrayLen(arguments.values) ){				// Check first element for an object, if it is then convert to query				if( isObject(arguments.values[1]) ){					arguments.values = entityToQuery(arguments.values);				}			}			// is this a simple value, if so, inflate it			if( isSimpleValue(arguments.values) ){ 				arguments.values = listToArray(arguments.values);			}						// setup local variables			val 	= arguments.values;			nameVal = arguments.values;						// query normalization?			if( isQuery(val) ){ 				// check if column sent? Else select the first column				if( NOT len(column) ){					// select the first one					qColumns = listToArray( arguments.values.columnList );					arguments.column = qColumns[1];				}				// column for values				val 	= qHelper.getColumnArray(arguments.values,arguments.column);				nameVal = val;				// name column values				if( len(arguments.nameColumn) ){					nameVal = qHelper.getColumnArray(arguments.values,arguments.nameColumn);				} 							}						// values				for(x=1; x lte arrayLen(val); x++){								thisValue = val[x];				thisName = nameVal[x];								// struct normalizing				if( isStruct( val[x] ) ){					// check for value?					if( structKeyExists(val[x], "value") ){ thisValue = val[x].value; }					if( structKeyExists(val[x], "name") ){ thisName = val[x].name; }					else{ thisName = thisValue;	}				}								// create option				buffer.append('<option value="#thisValue#"');				// selected				if( x eq arguments.selectedIndex ){					buffer.append('selected="selected"');				}				// selected value				if( thisValue eq arguments.selectedValue ){					buffer.append('selected="selected"');				}				buffer.append(">#thisName#</option>");			}								return buffer.toString();		</cfscript>	</cffunction>		<!--- select --->	<cffunction name="select" access="public" returntype="any" output="false" hint="Render out a select tag. Remember that any extra arguments are passed as tag attributes">		<cfargument name="name" 			type="string" 	required="true" hint="The name of the field"/>		<cfargument name="options" 			type="any"		required="false" default="" hint="The value for the options, usually by calling our options() method"/>		<!--- option arguments --->		<cfargument name="column" 			type="string" 	required="false" default=""  hint="If using a query or array of objects the column to display as value and name"/>		<cfargument name="nameColumn" 		type="string" 	required="false" default=""  hint="If using a query or array of objects, the name column to display, if not passed defaults to the value column"/>		<cfargument name="selectedIndex" 	type="numeric" 	required="false" default="0" hint="selected index"/>		<cfargument name="selectedValue" 	type="string" 	required="false" default="" hint="selected value if any"/>		<!--- html arguments --->		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled button or not?"/>		<cfargument name="multiple" 	type="boolean" 	required="false" default="false" hint="multiple button or not?"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfscript>			var buffer = createObject("java","java.lang.StringBuffer").init('');						// id			if( NOT structKeyExists(arguments,"id") ){ arguments.id = arguments.name; }						// label?			if( len(arguments.label) ){ buffer.append( this.label(field=arguments.label,wrapper=arguments.labelWrapper) ); }						//wrapper?			wrapTag(buffer,arguments.wrapper);						// disabled fix			if( arguments.disabled ){ arguments.disabled = "disabled"; }			else{ arguments.disabled = ""; }			// multiple fix			if( arguments.multiple ){ arguments.multiple = "multiple"; }			else{ arguments.multiple = ""; }						// create select			buffer.append("<select");			flattenAttributes(arguments,"options,column,nameColumn,selectedIndex,selectedValue,label,wrapper,labelWrapper",buffer).append(">");						// options			buffer.append( this.options(arguments.options,arguments.column,arguments.nameColumn,arguments.selectedIndex,arguments.selectedValue) );						// finalize select			buffer.append("</select>");						//wrapper?			wrapTag(buffer,arguments.wrapper,1);						return buffer.toString();			</cfscript>	</cffunction>	<!------------------------------------------- PRIVATE ------------------------------------------>		<!--- createInput --->
    <cffunction name="createInput" output="false" access="public" returntype="any" hint="Create an input tag">
    	<cfargument name="type" 		type="string"   required="false" default="text" hint="The type of input field to create"/>    	<cfargument name="name" 		type="string" 	required="true" hint="The name of the field"/>		<cfargument name="value" 		type="string"	required="false" default="" hint="The value of the field"/>		<cfargument name="disabled" 	type="boolean" 	required="false" default="false" hint="Disabled"/>		<cfargument name="checked" 		type="boolean" 	required="false" default="false" hint="Checked"/>		<cfargument name="readonly" 	type="boolean" 	required="false" default="false" hint="Readonly"/>		<cfargument name="wrapper" 		type="string" 	required="false" default="" hint="The wrapper tag to use around the tag. Empty by default">		<cfargument name="label" 		type="string"	required="false" default="" hint="If Passed we will prepend a label tag"/>		<cfargument name="labelwrapper" type="string"	required="false" default="" hint="The wrapper tag to use around the label. Empty by default"/>		<cfargument name="excludes" 	type="string" 	required="false" default="" hint="Excludes"/>		<cfscript>    		var buffer 		= createObject("java","java.lang.StringBuffer").init('');			var excludeList = "label,wrapper,labelWrapper,excludes";					// id			if(NOT structKeyExists(arguments,"id") ){ arguments.id = arguments.name; }						// label?			if( len(arguments.label) ){ buffer.append( this.label(field=arguments.label,wrapper=arguments.labelWrapper) ); }						//wrapper?			wrapTag(buffer,arguments.wrapper);						// excludes?			if( len(arguments.excludes) ){ excludeList &= ",#arguments.excludes#"; }						// disabled fix			if( arguments.disabled ){ arguments.disabled = "disabled"; }			else{ arguments.disabled = ""; }			// checked fix			if( arguments.checked ){ arguments.checked = "checked"; }			else{ arguments.checked = ""; }			// readonly fix			if( arguments.readonly ){ arguments.readonly = "readonly"; }			else{ arguments.readonly = ""; }						// create textarea			buffer.append("<input");			flattenAttributes(arguments,arguments.excludes,buffer).append("/>");						//wrapper?			wrapTag(buffer,arguments.wrapper,1);						return buffer.toString();			</cfscript>
    </cffunction>
		<!--- wrapTag --->    <cffunction name="wrapTag" output="false" access="private" returntype="any">    	<cfargument name="buffer">    	<cfargument name="tag">		<cfargument name="end" required="false" default="false">		<cfscript>			var slash = "";			if( len(arguments.tag) ){				if( arguments.end ){ slash = "/"; }				arguments.buffer.append("<#slash##arguments.tag#>");			}		</cfscript>    </cffunction>		<!--- makePretty --->	<cffunction name="makePretty" access="private" returntype="any" output="false" hint="make pretty text">		<cfargument name="text">		<cfscript>			return ucase(left(arguments.text, 1)) & removeChars(lcase(replace(arguments.text, "_"," ")),1,1);		</cfscript>	</cffunction>		<!--- prepareBaseLink --->    <cffunction name="prepareBaseLink" output="false" access="private" returntype="any" hint="Prepare a base link">    	<cfargument name="noBaseURL">    	<cfargument name="src">    	<cfscript>    		var baseURL = replacenocase( controller.getRequestService().getContext().getSESbaseURL() ,"index.cfm","");			// return if base is eempty			if( NOT len(baseURL) ){ return arguments.src; }						// Check if we have a base URL			if( arguments.noBaseURL eq FALSE and NOT find("://",arguments.src)){				arguments.src = baseURL & "/" & arguments.src;			}			return arguments.src;		</cfscript>    </cffunction>	<!--- passIncludeExclude --->	<cffunction name="passIncludeExclude" output="false" access="private" returntype="boolean" hint="checks if a list include exclude check passes">		<cfargument name="value" 		type="string"    required="true" hint="The value to test"/>		<cfargument name="includes" 	type="string"    required="false" default=""  hint="The columns to include in the rendering"/>		<cfargument name="excludes" 	type="string"    required="false" default=""  hint="The columns to exclude in the rendering"/>		<cfscript>			var disp = true;			// Include List?			if( len(arguments.includes) AND NOT listFindNoCase(arguments.includes,arguments.value) ){				disp = false;			}			// Exclude List?			if( len(arguments.excludes) AND listFindNoCase(arguments.excludes,arguments.value) ){				disp = false;			}			return disp;		</cfscript>	</cffunction>		<!--- flattenAttributes --->	<cffunction name="flattenAttributes" output="false" access="private" returntype="any" hint="flatten a struct of attributes to strings">		<cfargument name="target" 	type="struct" required="true">		<cfargument name="excludes" type="any" required="false" default=""/>		<cfargument name="buffer" 	type="any" required="true"/>		<cfscript>			var key   = "";						for(key in arguments.target){								if( (NOT len(arguments.excludes) OR (len(arguments.excludes) AND NOT listFindNoCase(arguments.excludes,key)))				    AND (structKeyExists(arguments.target, key) AND len(arguments.target[key])) ){					arguments.buffer.append(' #lcase(key)#="#arguments.target[key]#"');				}							}						return arguments.buffer;		</cfscript>	</cffunction></cfcomponent>