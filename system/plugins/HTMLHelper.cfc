<!-----------------------------------------------------------------------********************************************************************************Copyright Since 2005 ColdBox Framework by Luis Majano and Ortus Solutions, Corpwww.coldbox.org | www.luismajano.com | www.ortussolutions.com********************************************************************************Author 	 :	Luis MajanoDate     :	September 23, 2005Description :	A cool utility that helps you when working with HTMLModification History:-----------------------------------------------------------------------><cfcomponent hint="A cool utility that helps you when working with HTML"       		 output="false"       		 cache="true"><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cffunction name="init" access="public" returntype="HTMLHelper" output="false">		<cfscript>						setpluginName("HTMLHelper");			setpluginVersion("1.0");			setpluginDescription("A cool utility that helps you when working with HTML");			setpluginAuthor("Luis Majano");			setpluginAuthorURL("http://www.coldbox.org");						return this;		</cfscript>	</cffunction><!------------------------------------------- PUBLIC HELPER METHODS ------------------------------------------>
	<!--- addJSContent --->
    <cffunction name="addJSContent" output="false" access="public" returntype="any" hint="Open and close xhtml javascript tags for easy of just adding content">    	<cfargument name="content" type="any" required="true" hint="The content to render out"/>    	<cfscript>    		return '<script type="text/javascript"><![CDATA[#arguments.content#//]]></script>';		</cfscript>
    </cffunction>
	<!--- addCSSContent --->    <cffunction name="addStyleContent" output="false" access="public" returntype="any" hint="Open and close xhtml style tags for easy of just adding content">    	<cfargument name="content" type="any" required="true" hint="The content to render out"/>    	<cfscript>    		return '<style type="text/css">#arguments.content#</style>';		</cfscript>    </cffunction>	<!--- addAsset --->	<cffunction name="addAsset" output="false" access="public" returntype="any" hint="Add a js/css asset(s) to the html head section. You can also pass in a list of assets.">		<cfargument name="asset" 		type="any" 		required="true" hint="The asset to load, only js or css files. This can also be a comma delimmited list."/>		<cfargument name="sendToHeader" type="boolean"  required="false" default="true" hint="Send to the header via htmlhead? Defaults to true, else it returns the content"/>		<cfscript>			var sb 			= createObject("java","java.lang.StringBuffer").init('');			var x 			= 1;			var thisAsset   = "";			var event		= controller.getRequestService().getContext();						// request assets storage			event.paramValue(name="cbox_assets",value="",private=true);						for(x=1; x lte listLen(arguments.asset); x=x+1){				thisAsset = listGetAt(arguments.asset,x);				// Is asset already loaded				if( NOT listFindNoCase(event.getValue(name="cbox_assets",private=true),thisAsset) ){										// Load Asset					if( listLast(thisAsset,".") eq "js" ){						sb.append('<script src="#thisAsset#" type="text/javascript"></script>');					}					else{						sb.append('<link href="#thisAsset#" type="text/css" rel="stylesheet" />');					}										// Store It as Loaded					event.setValue(name="cbox_assets",value=listAppend(event.getValue(name="cbox_assets",private=true),thisAsset),private=true);				}			}						//Load it			if( len(sb.toString()) and arguments.sendToHeader ){				$htmlhead(sb.toString());			}			else{				return sb.toString();			}		</cfscript>	</cffunction>		<!--- br --->
    <cffunction name="br" output="false" access="public" returntype="any" hint="Generate line breaks">    	<cfargument name="count" type="numeric" required="false" default="1" hint="The number of repeats"/>    	<cfreturn repeatString("<br/>",arguments.count)>
    </cffunction>		<!--- nbs --->    <cffunction name="nbs" output="false" access="public" returntype="any" hint="Generate non-breaking spaces (&nbsp;)">    	<cfargument name="count" type="numeric" required="false" default="1" hint="The number of repeats"/>    	<cfreturn repeatString("&nbsp;",arguments.count)>    </cffunction>
	<!--- heading --->
    <cffunction name="heading" output="false" access="public" returntype="any" hint="Generate header tags">		<cfargument name="title" type="string" required="true"  hint="The title"/>		<cfargument name="size" type="numeric" required="false" default="1" hint="The header size"/>		<cfreturn "<h#arguments.size#>#arguments.title#</h#arguments.size#>">
    </cffunction>		<!--- tag --->    <cffunction name="tag" output="false" access="public" returntype="any" hint="surround content with a tag">		<cfargument name="tag" 		  type="string" required="true"  hint="The title"/>		<cfargument name="content"    type="string" required="false" default=""  hint="The content of the tag"/>		<cfargument name="attributes" type="struct" required="false" default="#structnew()#" hint="The properties for the tag"/>		<cfscript>			var key   = "";			var attrs = "";						// attributes			for(key in arguments.attributes){				attrs = attrs & ' #key#="#attributes[key]#"';			}					return '<#arguments.tag##attrs#>#arguments.content#</#arguments.tag#>';		</cfscript>    </cffunction>
	<!--- link --->    <cffunction name="link" output="false" access="public" returntype="any" hint="Create link tags, using the SES base URL or not">    	<cfargument name="href" 	 type="string" 	required="true" hint="The href link or a structure of name-value pairs to render: keys [href,rel,type,title,media]"/>		<cfargument name="rel" 		 type="string"  required="false" default="stylesheet" hint="The rel attribute"/>		<cfargument name="type" 	 type="string"  required="false" default="text/css" hint="The type attribute"/>		<cfargument name="title"	 type="string"  required="false" default="" hint="The title attribute"/>		<cfargument name="media" 	 type="string"  required="false" default="" hint="The media attribute"/>		<cfargument name="noBaseURL" type="boolean" required="false" default="false" hint="Prepends the setting of baseURL if false"/>		<cfscript>			var link 		= createObject("java","java.lang.StringBuffer").init("<link");			var srcParams 	= arguments;			var key 		= "";						// src check			if( NOT isSimpleValue(arguments.href) ){				srcParams = arguments.href;			}						// Check if we have a base URL			if( settingExists("htmlBaseURL") and noBaseURL eq FALSE and NOT find("://",arguments.href) ){				srcParams["href"] = getSetting("htmlBaseURL") & "/" & srcParams["href"];			}						// create link			for(key in srcParams){				if( key neq "noBaseURL" and len(srcParams[key]) ){					link.append(' #lcase(key)#="#srcParams[key]#"');				}			}						link.append(" />");						return link.toString();					</cfscript>			</cffunction>		<!--- img --->
    <cffunction name="img" output="false" access="public" returntype="any" hint="Create image tags">    	<cfargument name="src" 		 type="any" 	required="true" hint="The source URL to link to or a structure of name-value pairs to use to construct the image: [src,alt,class,width,height,title,rel]"/>		<cfargument name="alt" 		 type="string"  required="false" default="" hint="The alt tag"/>		<cfargument name="class" 	 type="string"  required="false" default="" hint="The class tag"/>		<cfargument name="width" 	 type="string"  required="false" default="" hint="The width tag"/>		<cfargument name="height"    type="string"  required="false" default="" hint="The height tag"/>		<cfargument name="title" 	 type="string"  required="false" default="" hint="The title tag"/>		<cfargument name="rel" 		 type="string"  required="false" default="" hint="The rel tag"/>		<cfargument name="noBaseURL" type="boolean" required="false" default="false" hint="Prepends the setting of baseURL if false"/>		<cfscript>			var img 		= createObject("java","java.lang.StringBuffer").init("<img");			var srcParams 	= arguments;			var key			= "";						// src check			if( NOT isSimpleValue(arguments.src) ){				srcParams = arguments.src;			}						// Check if we have a base URL			if( settingExists("htmlBaseURL") and noBaseURL eq FALSE and NOT find("://",arguments.src)){				srcParams["src"] = getSetting("htmlBaseURL") & "/" & srcParams["src"];			}						// create image			for(key in srcParams){				if( key neq "noBaseURL" and len(srcParams[key]) ){					img.append(' #lcase(key)#="#srcParams[key]#"');				}			}						img.append(" />");						return img.toString();		</cfscript>
    </cffunction>
	<!--- ul --->
    <cffunction name="ul" output="false" access="public" returntype="any" hint="Create un-ordered lists according to passed in values and arguments, compressed HTML">    	<cfargument name="values" 		type="any" 	  required="true"  default="" hint="An array of values or list of values"/>		<cfargument name="attributes" 	type="struct" required="false" default="#structnew()#" hint="Attributes for the enclosing UL tags"/>		<cfset arguments.tag = "ul">		<cfreturn toHTMLList(argumentCollection=arguments)>
    </cffunction>		<!--- ol --->    <cffunction name="ol" output="false" access="public" returntype="any" hint="Create ordered lists according to passed in values and arguments, compressed HTML">    	<cfargument name="values" 		type="any" 	  required="true"  default="" hint="An array of values or list of values"/>		<cfargument name="attributes" 	type="struct" required="false" default="#structnew()#" hint="Attributes for the enclosing OL tags"/>		<cfset arguments.tag = "ol">		<cfreturn toHTMLList(argumentCollection=arguments)>    </cffunction>		<!--- toHTMLList --->
    <cffunction name="toHTMLList" output="false" access="public" returntype="any" hint="Convert a sent in tag type to an HTML list">    	<cfargument name="tag"   		type="string" required="true" hint="The list tag type"/>    	<cfargument name="values" 		type="any"    required="true" default="" hint="An array of values or list of values"/>		<cfargument name="attributes" 	type="struct" required="false" default="#structnew()#" hint="Attributes for the enclosing UL tag"/>		<cfscript>    		var val 	= arguments.values;			var x   	= 1;			var str 	= createObject("java","java.lang.StringBuffer").init("");			var br  	= chr(13);			var depth 	= 1;			var attrs    = "";			var key		= "";						// list or array?			if( isSimpleValue(val) ){ val = listToArray(val); }						// attributes			for(key in attributes){				attrs = attrs & ' #key#="#attributes[key]#"';			}						str.append("<#arguments.tag##attrs#>");			for(x=1; x lte arrayLen(val); x=x+1){								if( isArray(val[x]) ){					str.append( toHTMLList(arguments.tag,val[x], arguments.attributes) );				}				else{					str.append("<li>#val[x]#</li>");				}							}						str.append("</#arguments.tag#>");			return str.toString();		</cfscript>
    </cffunction>

	<!--- meta --->
    <cffunction name="meta" output="false" access="public" returntype="any" hint="Helps you generate meta tags">    	<cfargument name="name" 	type="any" 		required="true" hint="A name for the meta tag or an array of struct data to convert to meta tags.Keys [name,content,type]"/>		<cfargument name="content" 	type="any" 		required="false" default="" hint="The content attribute"/>		<cfargument name="type" 	type="string"   required="false" default="name" hint="Either name or equiv which produces http-equiv instead of the name"/>		<cfscript>			var x 		= 1;			var buffer  = createObject("java","java.lang.StringBuffer").init("");			var tmpType = "";						// prep type    		if( arguments.type eq "equiv" ){ arguments.type = "http-equiv"; };						// Array of structs or simple value			if( isSimpleValue(arguments.name) ){				return '<meta #arguments.type#="#arguments.name#" content="#arguments.content#" />';			}						for(x=1; x lte arrayLen(arguments.name); x=x+1 ){				if( NOT structKeyExists(arguments.name[x], "type") ){					arguments.name[x].type = "name";				}				if(  arguments.name[x].type eq "equiv" ){					arguments.name[x].type = "http-equiv";				}								buffer.append('<meta #arguments.name[x].type#="#arguments.name[x].name#" content="#arguments.name[x].content#" />');			}						return buffer.toString();		</cfscript>
    </cffunction>
	<!--- docType --->
    <cffunction name="docType" output="false" access="public" returntype="any" hint="Render a doctype by type name: xhtml11,xhtml1-strict,xhtml-trans,xthml-frame,html5,html4-strict,html4-trans,html4-frame">    	<cfargument name="type" type="string" required="false" default="xhtml1-trans" hint="The doctype to generate"/>    	<cfscript>    		switch( arguments.type ){				case 'xhtml11' 		 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">'; }				case 'xhtml1-strict' : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'; }				case 'xhtml1-trans' : default	 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'; }				case 'xhtml1-frame'	 : { return '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">'; }				case 'html5'		 : { return '<!DOCTYPE html>'; }				case 'html4-strict'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">'; }				case 'html4-trans'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">'; }				case 'html4-frame'	 : { return '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">'; }			}		</cfscript>
    </cffunction>
</cfcomponent>